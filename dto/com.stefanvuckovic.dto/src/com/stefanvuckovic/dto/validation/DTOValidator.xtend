/*
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.dto.validation

import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.validation.CheckType
import com.stefanvuckovic.dto.dTO.DTOModel
import javax.inject.Inject
import com.stefanvuckovic.dto.scoping.CustomIndex
import com.stefanvuckovic.domainmodel.domainModel.DomainModelPackage

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DTOValidator extends AbstractDTOValidator {
	
	@Inject extension CustomIndex
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					DTOPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	//only on file save because it is expensive opp
	@Check(CheckType.NORMAL)
	def checUniqueConceptNameInDifferentFiles(DTOModel model) {
		val otherFilesConcepts = model.visibleConceptsDescriptionsFromOtherFiles
		for (c : model.concepts) {
			val conceptName = c.name
			if (otherFilesConcepts.containsKey(conceptName)) {
				error("Concept with name " + c.name + " is already defined",
					c, DomainModelPackage.eINSTANCE.concept_Name)
			}
		}
	}
	
}
