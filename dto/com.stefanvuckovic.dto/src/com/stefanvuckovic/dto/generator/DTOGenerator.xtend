/*
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.dto.generator

import com.stefanvuckovic.domainmodel.domainModel.AttributeType
import com.stefanvuckovic.domainmodel.domainModel.BasicType
import com.stefanvuckovic.domainmodel.domainModel.CollectionType
import com.stefanvuckovic.domainmodel.domainModel.Concept
import com.stefanvuckovic.domainmodel.domainModel.Enum
import com.stefanvuckovic.domainmodel.domainModel.RefType
import com.stefanvuckovic.domainmodel.domainModel.SingleType
import com.stefanvuckovic.domainmodel.generator.DomainModelGenerator
import com.stefanvuckovic.dto.dTO.DTOClass
import com.stefanvuckovic.dto.dTO.DTOModel
import com.stefanvuckovic.dto.dTO.EmailType
import com.stefanvuckovic.dto.dTO.FileType
import com.stefanvuckovic.dto.dTO.ImageType
import com.stefanvuckovic.dto.dTO.PasswordType
import com.stefanvuckovic.dto.dTO.TextType
import javax.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DTOGenerator extends AbstractGenerator {

	@Inject extension DomainModelGenerator generator
	@Inject extension DTOUIGenerator dtoUIGenerator
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.allContents.toIterable.filter(DTOModel).head
		for (c : model.concepts) {
			fsa.generateFile('''dto/«c.name».java''', c.compile)
		}
		dtoUIGenerator.doGenerate(resource, fsa, context)
	}
	
	def compile(Concept concept) {
		switch(concept) {
			DTOClass:
				compile(concept as DTOClass)
			Enum:
				generator.compile(concept, "dto")
		}	
	}
	
	def compile(DTOClass dto) '''
		package dto;
		
		public class «dto.name» «IF dto.superType != null»extends «dto.superType.name» «ENDIF»{
			«FOR attribute : dto.attributes»
			private «attribute.type.compile» «attribute.name»;
			«ENDFOR»
		
			«FOR attribute : dto.attributes»
			«attribute.compileAttributeAnnotations»
			public «attribute.type.compile» «attribute.type.getter»«attribute.name.toFirstUpper»() {
				return «attribute.name»;
			}
			
			public void set«attribute.name.toFirstUpper»(«attribute.type.compile» «attribute.name») {
				this.«attribute.name» = «attribute.name»;
			}
			
			«ENDFOR»
		}
	'''
	
	def compile(AttributeType type) {
		if(type instanceof CollectionType) {
			return "java.util.List<" + (type as CollectionType).ofType.typeString(false) + ">"
		} else if(type instanceof SingleType) {
			return (type as SingleType).typeString(true)
		}
	}
	
	def dispatch typeString(BasicType type, boolean primitive) {
		if(type instanceof TextType ||
		   type instanceof EmailType ||
		   type instanceof PasswordType ||
		   type instanceof ImageType ||
		   type instanceof FileType) {
		   return "String"
		} else {
			generator.typeString(type, primitive)
		}
	}
	
	def dispatch typeString(RefType type, boolean primitive) {
		var prefix = ""
		val res = type.reference.eResource
		if(res.URI.fileExtension == "domain") {
			prefix = "domain."
		}
		prefix + generator.typeString(type, primitive)
	}
	
	def compileWithPackageIncluded(AttributeType type) {
		if(type instanceof CollectionType) {
			return "java.util.List<" + (type as CollectionType).ofType.typeStringWithPackage(false) + ">"
		} else if(type instanceof SingleType) {
			return (type as SingleType).typeStringWithPackage(true)
		}
	}
	
	def dispatch typeStringWithPackage(BasicType type, boolean primitive) {
		if(type instanceof TextType ||
		   type instanceof EmailType ||
		   type instanceof PasswordType ||
		   type instanceof ImageType ||
		   type instanceof FileType) {
		   return "String"
		} else {
			generator.typeString(type, primitive)
		}
	}
	
	def dispatch typeStringWithPackage(RefType type, boolean primitive) {
		var prefix = ""
		val res = type.reference.eResource
		if(res.URI.fileExtension == "domain") {
			prefix = "domain."
		} else {
			prefix = "dto."
		}
		prefix + generator.typeString(type, primitive)
	}

}
