/*
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.dto.generator

import com.stefanvuckovic.dto.dTO.DTOClass
import com.stefanvuckovic.dto.dTO.DTOModel
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import javax.inject.Inject
import com.stefanvuckovic.dto.DTOUtil

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DTOUIGenerator extends AbstractGenerator {
	
	@Inject extension DTOUtil
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.allContents.toIterable.filter(DTOModel).head
		fsa.generateFile('''ui/mainTemplate.ui''', generateDefaultTemplate)
		for (c : model.concepts.filter(DTOClass)) {
			fsa.generateFile('''ui/«c.name.toFirstLower»Edit.ui''', c.compileEditComponents)
			fsa.generateFile('''ui/«c.name.toFirstLower»View.ui''', c.compileViewComponents)
		}
	}
	
	def compileViewComponents(DTOClass c) '''
		«c.compileViewServerComponent»
		«c.compileViewPage»
	'''
	
	def compileEditComponents(DTOClass c) '''
		«c.compileEditServerComponent»
		«c.compileEditPage»
	'''
	
	def compileViewServerComponent(DTOClass c) '''
		server_component «c.name»ViewSC {
		
		}
	'''
	
	def compileViewPage(DTOClass c) '''
		page «c.name.toFirstLower»View(«c.name» «c.name.toFirstLower») uses «c.name»ViewSC sc template:mainTemplate {
			override body {
				#section {
					«FOR attr : c.attributes»
					«IF !attr.isID»
					#group {
						#label value:"«attr.name.splitCamelCaseAttrName.toFirstUpper»"
						output(«c.name.toFirstLower».«attr.name»)
					}
					«ENDIF»
					«ENDFOR»
				}
			}
		}
	'''
	
	def compileEditServerComponent(DTOClass c) '''
		server_component «c.name»EditSC {
			void save();
		}
	'''
	
	def compileEditPage(DTOClass c) '''
		page «c.name.toFirstLower»Edit(«c.name» «c.name.toFirstLower») uses «c.name»EditSC sc template:mainTemplate {
			override body {
				#form {
					«FOR attr : c.attributes»
					«IF !attr.isID»
					#group {
						#label value:"«attr.name.splitCamelCaseAttrName.toFirstUpper»"
						input(«c.name.toFirstLower».«attr.name»)
					}
					«ENDIF»
					«ENDFOR»
					
					#action action : sc.save() {
						#textComp value : "Save" escape : false
					}
				}
			}
		}
	'''
	
	def generateDefaultTemplate() '''
		template mainTemplate {
			header {
			
			}
			body {
				
			}
		}
	'''
	
	def splitCamelCaseAttrName(String name) {
		val words = name.split("(?<!(^|[A-Z]))(?=[A-Z])|(?<!^)(?=[A-Z][a-z])")
		words.map[normalizeWord].join(" ")
	}
	
	def normalizeWord(String word) {
		if(word.length() > 1 && Character.isLowerCase(word.charAt(1))) {
			return word.toFirstLower
		}
		word;
	}
}
