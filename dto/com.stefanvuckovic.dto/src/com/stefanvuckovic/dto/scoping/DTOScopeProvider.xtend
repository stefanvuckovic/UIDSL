/*
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.dto.scoping

import com.stefanvuckovic.domainmodel.domainModel.DomainModelPackage
import com.stefanvuckovic.dto.dTO.DTOModel
import javax.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.SimpleScope

import static extension org.eclipse.emf.ecore.util.EcoreUtil.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DTOScopeProvider extends AbstractDTOScopeProvider {

	@Inject extension CustomIndex

	override getScope(EObject context, EReference reference) {
		if(reference == DomainModelPackage.eINSTANCE.refType_Reference &&
			context.rootContainer instanceof DTOModel) {
			return scopeForConcept(context)
		} else {
			super.getScope(context, reference)
		}
	}
	
	override def scopeForConcept(EObject context) {
		val outerScope = new SimpleScope(context.listOfVisibleConceptsDescriptionsFromOtherFiles)
		Scopes.scopeFor((context.rootContainer as DTOModel).concepts, outerScope)
	}
	
}
