/*
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.dto.serializer;

import com.google.inject.Inject;
import com.stefanvuckovic.domainmodel.domainModel.Attribute;
import com.stefanvuckovic.domainmodel.domainModel.BoolConstant;
import com.stefanvuckovic.domainmodel.domainModel.BoolType;
import com.stefanvuckovic.domainmodel.domainModel.CollectionType;
import com.stefanvuckovic.domainmodel.domainModel.DateConstant;
import com.stefanvuckovic.domainmodel.domainModel.DateType;
import com.stefanvuckovic.domainmodel.domainModel.DomainModelPackage;
import com.stefanvuckovic.domainmodel.domainModel.Entity;
import com.stefanvuckovic.domainmodel.domainModel.EntityDeleteOption;
import com.stefanvuckovic.domainmodel.domainModel.EnumLiteral;
import com.stefanvuckovic.domainmodel.domainModel.Expression;
import com.stefanvuckovic.domainmodel.domainModel.InheritanceMappingOption;
import com.stefanvuckovic.domainmodel.domainModel.InheritanceMappingType;
import com.stefanvuckovic.domainmodel.domainModel.IntConstant;
import com.stefanvuckovic.domainmodel.domainModel.IntType;
import com.stefanvuckovic.domainmodel.domainModel.LongConstant;
import com.stefanvuckovic.domainmodel.domainModel.LongType;
import com.stefanvuckovic.domainmodel.domainModel.Model;
import com.stefanvuckovic.domainmodel.domainModel.Null;
import com.stefanvuckovic.domainmodel.domainModel.RefType;
import com.stefanvuckovic.domainmodel.domainModel.SelectionMember;
import com.stefanvuckovic.domainmodel.domainModel.StaticFieldSelection;
import com.stefanvuckovic.domainmodel.domainModel.StringConstant;
import com.stefanvuckovic.domainmodel.domainModel.StringType;
import com.stefanvuckovic.domainmodel.serializer.DomainModelSemanticSequencer;
import com.stefanvuckovic.dto.dTO.DTOClass;
import com.stefanvuckovic.dto.dTO.DTOModel;
import com.stefanvuckovic.dto.dTO.DTOPackage;
import com.stefanvuckovic.dto.dTO.EmailType;
import com.stefanvuckovic.dto.dTO.FileType;
import com.stefanvuckovic.dto.dTO.IDAttribute;
import com.stefanvuckovic.dto.dTO.ImageType;
import com.stefanvuckovic.dto.dTO.ObjectRepresentation;
import com.stefanvuckovic.dto.dTO.PasswordType;
import com.stefanvuckovic.dto.dTO.TextType;
import com.stefanvuckovic.dto.services.DTOGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;

@SuppressWarnings("all")
public class DTOSemanticSequencer extends DomainModelSemanticSequencer {

	@Inject
	private DTOGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DTOPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DTOPackage.DTO_CLASS:
				sequence_DTOClass(context, (DTOClass) semanticObject); 
				return; 
			case DTOPackage.DTO_MODEL:
				sequence_DTOModel(context, (DTOModel) semanticObject); 
				return; 
			case DTOPackage.EMAIL_TYPE:
				sequence_BasicType(context, (EmailType) semanticObject); 
				return; 
			case DTOPackage.FILE_TYPE:
				sequence_BasicType(context, (FileType) semanticObject); 
				return; 
			case DTOPackage.ID_ATTRIBUTE:
				sequence_AttributeOption(context, (IDAttribute) semanticObject); 
				return; 
			case DTOPackage.IMAGE_TYPE:
				sequence_BasicType(context, (ImageType) semanticObject); 
				return; 
			case DTOPackage.OBJECT_REPRESENTATION:
				sequence_AttributeOption(context, (ObjectRepresentation) semanticObject); 
				return; 
			case DTOPackage.PASSWORD_TYPE:
				sequence_BasicType(context, (PasswordType) semanticObject); 
				return; 
			case DTOPackage.TEXT_TYPE:
				sequence_BasicType(context, (TextType) semanticObject); 
				return; 
			}
		else if (epackage == DomainModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DomainModelPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case DomainModelPackage.BOOL_CONSTANT:
				sequence_Constant(context, (BoolConstant) semanticObject); 
				return; 
			case DomainModelPackage.BOOL_TYPE:
				sequence_BasicType(context, (BoolType) semanticObject); 
				return; 
			case DomainModelPackage.COLLECTION_TYPE:
				sequence_CollectionType(context, (CollectionType) semanticObject); 
				return; 
			case DomainModelPackage.DATE_CONSTANT:
				sequence_Constant(context, (DateConstant) semanticObject); 
				return; 
			case DomainModelPackage.DATE_TYPE:
				sequence_BasicType(context, (DateType) semanticObject); 
				return; 
			case DomainModelPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case DomainModelPackage.ENTITY_DELETE_OPTION:
				sequence_EntityOption(context, (EntityDeleteOption) semanticObject); 
				return; 
			case DomainModelPackage.ENUM:
				sequence_Enum(context, (com.stefanvuckovic.domainmodel.domainModel.Enum) semanticObject); 
				return; 
			case DomainModelPackage.ENUM_LITERAL:
				sequence_EnumLiteral(context, (EnumLiteral) semanticObject); 
				return; 
			case DomainModelPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case DomainModelPackage.INHERITANCE_MAPPING_OPTION:
				sequence_EntityOption(context, (InheritanceMappingOption) semanticObject); 
				return; 
			case DomainModelPackage.INHERITANCE_MAPPING_TYPE:
				sequence_InheritanceMappingType(context, (InheritanceMappingType) semanticObject); 
				return; 
			case DomainModelPackage.INT_CONSTANT:
				sequence_Constant(context, (IntConstant) semanticObject); 
				return; 
			case DomainModelPackage.INT_TYPE:
				sequence_BasicType(context, (IntType) semanticObject); 
				return; 
			case DomainModelPackage.LONG_CONSTANT:
				sequence_Constant(context, (LongConstant) semanticObject); 
				return; 
			case DomainModelPackage.LONG_TYPE:
				sequence_BasicType(context, (LongType) semanticObject); 
				return; 
			case DomainModelPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case DomainModelPackage.NULL:
				sequence_Constant(context, (Null) semanticObject); 
				return; 
			case DomainModelPackage.REF_TYPE:
				sequence_RefType(context, (RefType) semanticObject); 
				return; 
			case DomainModelPackage.SELECTION_MEMBER:
				sequence_DumbSelectionMember(context, (SelectionMember) semanticObject); 
				return; 
			case DomainModelPackage.STATIC_FIELD_SELECTION:
				sequence_StaticFieldSelection(context, (StaticFieldSelection) semanticObject); 
				return; 
			case DomainModelPackage.STRING_CONSTANT:
				sequence_Constant(context, (StringConstant) semanticObject); 
				return; 
			case DomainModelPackage.STRING_TYPE:
				sequence_BasicType(context, (StringType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AttributeOption returns IDAttribute
	 *     Option returns IDAttribute
	 *
	 * Constraint:
	 *     {IDAttribute}
	 */
	protected void sequence_AttributeOption(ISerializationContext context, IDAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeOption returns ObjectRepresentation
	 *     Option returns ObjectRepresentation
	 *
	 * Constraint:
	 *     {ObjectRepresentation}
	 */
	protected void sequence_AttributeOption(ISerializationContext context, ObjectRepresentation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BasicType returns EmailType
	 *     AttributeType returns EmailType
	 *     SingleType returns EmailType
	 *
	 * Constraint:
	 *     {EmailType}
	 */
	protected void sequence_BasicType(ISerializationContext context, EmailType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BasicType returns FileType
	 *     AttributeType returns FileType
	 *     SingleType returns FileType
	 *
	 * Constraint:
	 *     {FileType}
	 */
	protected void sequence_BasicType(ISerializationContext context, FileType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BasicType returns ImageType
	 *     AttributeType returns ImageType
	 *     SingleType returns ImageType
	 *
	 * Constraint:
	 *     {ImageType}
	 */
	protected void sequence_BasicType(ISerializationContext context, ImageType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BasicType returns PasswordType
	 *     AttributeType returns PasswordType
	 *     SingleType returns PasswordType
	 *
	 * Constraint:
	 *     {PasswordType}
	 */
	protected void sequence_BasicType(ISerializationContext context, PasswordType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BasicType returns TextType
	 *     AttributeType returns TextType
	 *     SingleType returns TextType
	 *
	 * Constraint:
	 *     {TextType}
	 */
	protected void sequence_BasicType(ISerializationContext context, TextType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Concept returns DTOClass
	 *     DTOClass returns DTOClass
	 *
	 * Constraint:
	 *     (name=ID superType=[DTOClass|ID]? attributes+=Attribute*)
	 */
	protected void sequence_DTOClass(ISerializationContext context, DTOClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DTOModel returns DTOModel
	 *
	 * Constraint:
	 *     concepts+=Concept+
	 */
	protected void sequence_DTOModel(ISerializationContext context, DTOModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
