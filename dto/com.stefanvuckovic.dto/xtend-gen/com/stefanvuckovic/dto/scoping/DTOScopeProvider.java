/**
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.dto.scoping;

import com.google.common.base.Objects;
import com.stefanvuckovic.domainmodel.domainModel.Concept;
import com.stefanvuckovic.domainmodel.domainModel.DomainModelPackage;
import com.stefanvuckovic.dto.dTO.DTOModel;
import com.stefanvuckovic.dto.scoping.AbstractDTOScopeProvider;
import com.stefanvuckovic.dto.scoping.CustomIndex;
import java.util.List;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class DTOScopeProvider extends AbstractDTOScopeProvider {
  @Inject
  @Extension
  private CustomIndex _customIndex;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xifexpression = null;
    if ((Objects.equal(reference, DomainModelPackage.eINSTANCE.getRefType_Reference()) && 
      (EcoreUtil.getRootContainer(context) instanceof DTOModel))) {
      return this.scopeForConcept(context);
    } else {
      _xifexpression = super.getScope(context, reference);
    }
    return _xifexpression;
  }
  
  @Override
  public IScope scopeForConcept(final EObject context) {
    IScope _xblockexpression = null;
    {
      List<IEObjectDescription> _listOfVisibleConceptsDescriptionsFromOtherFiles = this._customIndex.getListOfVisibleConceptsDescriptionsFromOtherFiles(context);
      final SimpleScope outerScope = new SimpleScope(_listOfVisibleConceptsDescriptionsFromOtherFiles);
      EObject _rootContainer = EcoreUtil.getRootContainer(context);
      EList<Concept> _concepts = ((DTOModel) _rootContainer).getConcepts();
      _xblockexpression = Scopes.scopeFor(_concepts, outerScope);
    }
    return _xblockexpression;
  }
}
