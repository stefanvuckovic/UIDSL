/**
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.dto.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.stefanvuckovic.domainmodel.domainModel.Attribute;
import com.stefanvuckovic.domainmodel.domainModel.AttributeType;
import com.stefanvuckovic.domainmodel.domainModel.BasicType;
import com.stefanvuckovic.domainmodel.domainModel.CollectionType;
import com.stefanvuckovic.domainmodel.domainModel.Concept;
import com.stefanvuckovic.domainmodel.domainModel.RefType;
import com.stefanvuckovic.domainmodel.domainModel.SingleType;
import com.stefanvuckovic.domainmodel.generator.DomainModelGenerator;
import com.stefanvuckovic.dto.dTO.DTOClass;
import com.stefanvuckovic.dto.dTO.DTOModel;
import com.stefanvuckovic.dto.dTO.EmailType;
import com.stefanvuckovic.dto.dTO.FileType;
import com.stefanvuckovic.dto.dTO.ImageType;
import com.stefanvuckovic.dto.dTO.PasswordType;
import com.stefanvuckovic.dto.dTO.TextType;
import com.stefanvuckovic.dto.generator.DTOUIGenerator;
import java.util.Arrays;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DTOGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private DomainModelGenerator generator;
  
  @Inject
  @Extension
  private DTOUIGenerator dtoUIGenerator;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<DTOModel> _filter = Iterables.<DTOModel>filter(_iterable, DTOModel.class);
    final DTOModel model = IterableExtensions.<DTOModel>head(_filter);
    EList<Concept> _concepts = model.getConcepts();
    for (final Concept c : _concepts) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("dto/");
      String _name = c.getName();
      _builder.append(_name, "");
      _builder.append(".java");
      CharSequence _compile = this.compile(c);
      fsa.generateFile(_builder.toString(), _compile);
    }
    this.dtoUIGenerator.doGenerate(resource, fsa, context);
  }
  
  public CharSequence compile(final Concept concept) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (concept instanceof DTOClass) {
      _matched=true;
      _switchResult = this.compile(((DTOClass) concept));
    }
    if (!_matched) {
      if (concept instanceof com.stefanvuckovic.domainmodel.domainModel.Enum) {
        _matched=true;
        _switchResult = this.generator.compile(((com.stefanvuckovic.domainmodel.domainModel.Enum)concept), "dto");
      }
    }
    return _switchResult;
  }
  
  public CharSequence compile(final DTOClass dto) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package dto;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = dto.getName();
    _builder.append(_name, "");
    _builder.append(" ");
    {
      DTOClass _superType = dto.getSuperType();
      boolean _notEquals = (!Objects.equal(_superType, null));
      if (_notEquals) {
        _builder.append("extends ");
        DTOClass _superType_1 = dto.getSuperType();
        String _name_1 = _superType_1.getName();
        _builder.append(_name_1, "");
        _builder.append(" ");
      }
    }
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    {
      EList<Attribute> _attributes = dto.getAttributes();
      for(final Attribute attribute : _attributes) {
        _builder.append("\t");
        _builder.append("private ");
        AttributeType _type = attribute.getType();
        String _compile = this.compile(_type);
        _builder.append(_compile, "\t");
        _builder.append(" ");
        String _name_2 = attribute.getName();
        _builder.append(_name_2, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      EList<Attribute> _attributes_1 = dto.getAttributes();
      for(final Attribute attribute_1 : _attributes_1) {
        _builder.append("\t");
        CharSequence _compileAttributeAnnotations = this.generator.compileAttributeAnnotations(attribute_1);
        _builder.append(_compileAttributeAnnotations, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("public ");
        AttributeType _type_1 = attribute_1.getType();
        String _compile_1 = this.compile(_type_1);
        _builder.append(_compile_1, "\t");
        _builder.append(" ");
        AttributeType _type_2 = attribute_1.getType();
        String _ter = this.generator.getter(_type_2);
        _builder.append(_ter, "\t");
        String _name_3 = attribute_1.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name_3);
        _builder.append(_firstUpper, "\t");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return ");
        String _name_4 = attribute_1.getName();
        _builder.append(_name_4, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void set");
        String _name_5 = attribute_1.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_5);
        _builder.append(_firstUpper_1, "\t");
        _builder.append("(");
        AttributeType _type_3 = attribute_1.getType();
        String _compile_2 = this.compile(_type_3);
        _builder.append(_compile_2, "\t");
        _builder.append(" ");
        String _name_6 = attribute_1.getName();
        _builder.append(_name_6, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.");
        String _name_7 = attribute_1.getName();
        _builder.append(_name_7, "\t\t");
        _builder.append(" = ");
        String _name_8 = attribute_1.getName();
        _builder.append(_name_8, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String compile(final AttributeType type) {
    if ((type instanceof CollectionType)) {
      SingleType _ofType = ((CollectionType) type).getOfType();
      String _typeString = this.typeString(_ofType, false);
      String _plus = ("java.util.List<" + _typeString);
      return (_plus + ">");
    } else {
      if ((type instanceof SingleType)) {
        return this.typeString(((SingleType) type), true);
      }
    }
    return null;
  }
  
  protected String _typeString(final BasicType type, final boolean primitive) {
    String _xifexpression = null;
    if ((((((type instanceof TextType) || 
      (type instanceof EmailType)) || 
      (type instanceof PasswordType)) || 
      (type instanceof ImageType)) || 
      (type instanceof FileType))) {
      return "String";
    } else {
      _xifexpression = this.generator.typeString(type, primitive);
    }
    return _xifexpression;
  }
  
  protected String _typeString(final RefType type, final boolean primitive) {
    String _xblockexpression = null;
    {
      String prefix = "";
      Concept _reference = type.getReference();
      final Resource res = _reference.eResource();
      URI _uRI = res.getURI();
      String _fileExtension = _uRI.fileExtension();
      boolean _equals = Objects.equal(_fileExtension, "domain");
      if (_equals) {
        prefix = "domain.";
      }
      String _typeString = this.generator.typeString(type, primitive);
      _xblockexpression = (prefix + _typeString);
    }
    return _xblockexpression;
  }
  
  public String compileWithPackageIncluded(final AttributeType type) {
    if ((type instanceof CollectionType)) {
      SingleType _ofType = ((CollectionType) type).getOfType();
      String _typeStringWithPackage = this.typeStringWithPackage(_ofType, false);
      String _plus = ("java.util.List<" + _typeStringWithPackage);
      return (_plus + ">");
    } else {
      if ((type instanceof SingleType)) {
        return this.typeStringWithPackage(((SingleType) type), true);
      }
    }
    return null;
  }
  
  protected String _typeStringWithPackage(final BasicType type, final boolean primitive) {
    String _xifexpression = null;
    if ((((((type instanceof TextType) || 
      (type instanceof EmailType)) || 
      (type instanceof PasswordType)) || 
      (type instanceof ImageType)) || 
      (type instanceof FileType))) {
      return "String";
    } else {
      _xifexpression = this.generator.typeString(type, primitive);
    }
    return _xifexpression;
  }
  
  protected String _typeStringWithPackage(final RefType type, final boolean primitive) {
    String _xblockexpression = null;
    {
      String prefix = "";
      Concept _reference = type.getReference();
      final Resource res = _reference.eResource();
      URI _uRI = res.getURI();
      String _fileExtension = _uRI.fileExtension();
      boolean _equals = Objects.equal(_fileExtension, "domain");
      if (_equals) {
        prefix = "domain.";
      } else {
        prefix = "dto.";
      }
      String _typeString = this.generator.typeString(type, primitive);
      _xblockexpression = (prefix + _typeString);
    }
    return _xblockexpression;
  }
  
  public String typeString(final SingleType type, final boolean primitive) {
    if (type instanceof BasicType) {
      return _typeString((BasicType)type, primitive);
    } else if (type instanceof RefType) {
      return _typeString((RefType)type, primitive);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(type, primitive).toString());
    }
  }
  
  public String typeStringWithPackage(final SingleType type, final boolean primitive) {
    if (type instanceof BasicType) {
      return _typeStringWithPackage((BasicType)type, primitive);
    } else if (type instanceof RefType) {
      return _typeStringWithPackage((RefType)type, primitive);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(type, primitive).toString());
    }
  }
}
