/**
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.dto.generator;

import com.google.common.collect.Iterables;
import com.stefanvuckovic.domainmodel.domainModel.Attribute;
import com.stefanvuckovic.domainmodel.domainModel.Concept;
import com.stefanvuckovic.dto.DTOUtil;
import com.stefanvuckovic.dto.dTO.DTOClass;
import com.stefanvuckovic.dto.dTO.DTOModel;
import java.util.List;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DTOUIGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private DTOUtil _dTOUtil;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<DTOModel> _filter = Iterables.<DTOModel>filter(_iterable, DTOModel.class);
    final DTOModel model = IterableExtensions.<DTOModel>head(_filter);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("ui/mainTemplate.ui");
    CharSequence _generateDefaultTemplate = this.generateDefaultTemplate();
    fsa.generateFile(_builder.toString(), _generateDefaultTemplate);
    EList<Concept> _concepts = model.getConcepts();
    Iterable<DTOClass> _filter_1 = Iterables.<DTOClass>filter(_concepts, DTOClass.class);
    for (final DTOClass c : _filter_1) {
      {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("ui/");
        String _name = c.getName();
        String _firstLower = StringExtensions.toFirstLower(_name);
        _builder_1.append(_firstLower, "");
        _builder_1.append("Edit.ui");
        CharSequence _compileEditComponents = this.compileEditComponents(c);
        fsa.generateFile(_builder_1.toString(), _compileEditComponents);
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("ui/");
        String _name_1 = c.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_1);
        _builder_2.append(_firstLower_1, "");
        _builder_2.append("View.ui");
        CharSequence _compileViewComponents = this.compileViewComponents(c);
        fsa.generateFile(_builder_2.toString(), _compileViewComponents);
      }
    }
  }
  
  public CharSequence compileViewComponents(final DTOClass c) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compileViewServerComponent = this.compileViewServerComponent(c);
    _builder.append(_compileViewServerComponent, "");
    _builder.newLineIfNotEmpty();
    CharSequence _compileViewPage = this.compileViewPage(c);
    _builder.append(_compileViewPage, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileEditComponents(final DTOClass c) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compileEditServerComponent = this.compileEditServerComponent(c);
    _builder.append(_compileEditServerComponent, "");
    _builder.newLineIfNotEmpty();
    CharSequence _compileEditPage = this.compileEditPage(c);
    _builder.append(_compileEditPage, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileViewServerComponent(final DTOClass c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("server_component ");
    String _name = c.getName();
    _builder.append(_name, "");
    _builder.append("ViewSC {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileViewPage(final DTOClass c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("page ");
    String _name = c.getName();
    String _firstLower = StringExtensions.toFirstLower(_name);
    _builder.append(_firstLower, "");
    _builder.append("View(");
    String _name_1 = c.getName();
    _builder.append(_name_1, "");
    _builder.append(" ");
    String _name_2 = c.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower_1, "");
    _builder.append(") uses ");
    String _name_3 = c.getName();
    _builder.append(_name_3, "");
    _builder.append("ViewSC sc template:mainTemplate {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("override body {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("#section {");
    _builder.newLine();
    {
      EList<Attribute> _attributes = c.getAttributes();
      for(final Attribute attr : _attributes) {
        {
          boolean _isID = this._dTOUtil.isID(attr);
          boolean _not = (!_isID);
          if (_not) {
            _builder.append("\t\t\t");
            _builder.append("#group {");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("#label value:\"");
            String _name_4 = attr.getName();
            String _splitCamelCaseAttrName = this.splitCamelCaseAttrName(_name_4);
            String _firstUpper = StringExtensions.toFirstUpper(_splitCamelCaseAttrName);
            _builder.append(_firstUpper, "\t\t\t\t");
            _builder.append("\"");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("output(");
            String _name_5 = c.getName();
            String _firstLower_2 = StringExtensions.toFirstLower(_name_5);
            _builder.append(_firstLower_2, "\t\t\t\t");
            _builder.append(".");
            String _name_6 = attr.getName();
            _builder.append(_name_6, "\t\t\t\t");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileEditServerComponent(final DTOClass c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("server_component ");
    String _name = c.getName();
    _builder.append(_name, "");
    _builder.append("EditSC {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("void save();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileEditPage(final DTOClass c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("page ");
    String _name = c.getName();
    String _firstLower = StringExtensions.toFirstLower(_name);
    _builder.append(_firstLower, "");
    _builder.append("Edit(");
    String _name_1 = c.getName();
    _builder.append(_name_1, "");
    _builder.append(" ");
    String _name_2 = c.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower_1, "");
    _builder.append(") uses ");
    String _name_3 = c.getName();
    _builder.append(_name_3, "");
    _builder.append("EditSC sc template:mainTemplate {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("override body {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("#form {");
    _builder.newLine();
    {
      EList<Attribute> _attributes = c.getAttributes();
      for(final Attribute attr : _attributes) {
        {
          boolean _isID = this._dTOUtil.isID(attr);
          boolean _not = (!_isID);
          if (_not) {
            _builder.append("\t\t\t");
            _builder.append("#group {");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("#label value:\"");
            String _name_4 = attr.getName();
            String _splitCamelCaseAttrName = this.splitCamelCaseAttrName(_name_4);
            String _firstUpper = StringExtensions.toFirstUpper(_splitCamelCaseAttrName);
            _builder.append(_firstUpper, "\t\t\t\t");
            _builder.append("\"");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("input(");
            String _name_5 = c.getName();
            String _firstLower_2 = StringExtensions.toFirstLower(_name_5);
            _builder.append(_firstLower_2, "\t\t\t\t");
            _builder.append(".");
            String _name_6 = attr.getName();
            _builder.append(_name_6, "\t\t\t\t");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("#action action : sc.save() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("#textComp value : \"Save\" escape : false");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateDefaultTemplate() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("template mainTemplate {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("header {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("body {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String splitCamelCaseAttrName(final String name) {
    String _xblockexpression = null;
    {
      final String[] words = name.split("(?<!(^|[A-Z]))(?=[A-Z])|(?<!^)(?=[A-Z][a-z])");
      final Function1<String, String> _function = (String it) -> {
        return this.normalizeWord(it);
      };
      List<String> _map = ListExtensions.<String, String>map(((List<String>)Conversions.doWrapArray(words)), _function);
      _xblockexpression = IterableExtensions.join(_map, " ");
    }
    return _xblockexpression;
  }
  
  public String normalizeWord(final String word) {
    String _xblockexpression = null;
    {
      if (((word.length() > 1) && Character.isLowerCase(word.charAt(1)))) {
        return StringExtensions.toFirstLower(word);
      }
      _xblockexpression = word;
    }
    return _xblockexpression;
  }
}
