/*
 * generated by Xtext 2.10.0
 */
grammar InternalDomainToDTO;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.stefanvuckovic.domainToDto.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.stefanvuckovic.domainToDto.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.stefanvuckovic.domainToDto.services.DomainToDTOGrammarAccess;

}

@parser::members {

 	private DomainToDTOGrammarAccess grammarAccess;

    public InternalDomainToDTOParser(TokenStream input, DomainToDTOGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MappingModel";
   	}

   	@Override
   	protected DomainToDTOGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMappingModel
entryRuleMappingModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingModelRule()); }
	iv_ruleMappingModel=ruleMappingModel
	{ $current=$iv_ruleMappingModel.current; }
	EOF;

// Rule MappingModel
ruleMappingModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMappingModelAccess().getMappersMapperParserRuleCall_0());
			}
			lv_mappers_0_0=ruleMapper
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMappingModelRule());
				}
				add(
					$current,
					"mappers",
					lv_mappers_0_0,
					"com.stefanvuckovic.domainToDto.DomainToDTO.Mapper");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleMapper
entryRuleMapper returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapperRule()); }
	iv_ruleMapper=ruleMapper
	{ $current=$iv_ruleMapper.current; }
	EOF;

// Rule Mapper
ruleMapper returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='mapper'
		{
			newLeafNode(otherlv_0, grammarAccess.getMapperAccess().getMapperKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMapperAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMapperRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='dto'
		{
			newLeafNode(otherlv_2, grammarAccess.getMapperAccess().getDtoKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMapperRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getMapperAccess().getDtoDTOClassCrossReference_3_0());
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getMapperAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapperAccess().getAttributesMappedAttributeParserRuleCall_5_0());
				}
				lv_attributes_5_0=ruleMappedAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapperRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_5_0,
						"com.stefanvuckovic.domainToDto.DomainToDTO.MappedAttribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getMapperAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleMappedAttribute
entryRuleMappedAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappedAttributeRule()); }
	iv_ruleMappedAttribute=ruleMappedAttribute
	{ $current=$iv_ruleMappedAttribute.current; }
	EOF;

// Rule MappedAttribute
ruleMappedAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMappedAttributeRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getMappedAttributeAccess().getAttrAttributeCrossReference_0_0());
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getMappedAttributeAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMappedAttributeAccess().getMappingExpressionParserRuleCall_2_0());
				}
				lv_mapping_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMappedAttributeRule());
					}
					set(
						$current,
						"mapping",
						lv_mapping_2_0,
						"com.stefanvuckovic.domainToDto.DomainToDTO.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getMemberSelectionExpressionParserRuleCall_0());
		}
		this_MemberSelectionExpression_0=ruleMemberSelectionExpression
		{
			$current = $this_MemberSelectionExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getEntityMappingExpressionParserRuleCall_1());
		}
		this_EntityMappingExpression_1=ruleEntityMappingExpression
		{
			$current = $this_EntityMappingExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMemberSelectionExpression
entryRuleMemberSelectionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemberSelectionExpressionRule()); }
	iv_ruleMemberSelectionExpression=ruleMemberSelectionExpression
	{ $current=$iv_ruleMemberSelectionExpression.current; }
	EOF;

// Rule MemberSelectionExpression
ruleMemberSelectionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMemberSelectionExpressionAccess().getAtomExpressionParserRuleCall_0());
		}
		this_AtomExpression_0=ruleAtomExpression
		{
			$current = $this_AtomExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMemberSelectionExpressionAccess().getMemberSelectionExpressionReceiverAction_1_0(),
						$current);
				}
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getMemberSelectionExpressionAccess().getFullStopKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMemberSelectionExpressionRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getMemberSelectionExpressionAccess().getMemberAttributeCrossReference_1_2_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEntityMappingExpression
entryRuleEntityMappingExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityMappingExpressionRule()); }
	iv_ruleEntityMappingExpression=ruleEntityMappingExpression
	{ $current=$iv_ruleEntityMappingExpression.current; }
	EOF;

// Rule EntityMappingExpression
ruleEntityMappingExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEntityMappingExpressionAccess().getEntityMappingExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='map'
		{
			newLeafNode(otherlv_1, grammarAccess.getEntityMappingExpressionAccess().getMapKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityMappingExpressionAccess().getMappedEntityMemberSelectionExpressionParserRuleCall_2_0());
				}
				lv_mappedEntity_2_0=ruleMemberSelectionExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityMappingExpressionRule());
					}
					set(
						$current,
						"mappedEntity",
						lv_mappedEntity_2_0,
						"com.stefanvuckovic.domainToDto.DomainToDTO.MemberSelectionExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='with'
		{
			newLeafNode(otherlv_3, grammarAccess.getEntityMappingExpressionAccess().getWithKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityMappingExpressionRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getEntityMappingExpressionAccess().getMapperMapperCrossReference_4_0());
				}
			)
		)
	)
;

// Entry rule entryRuleAtomExpression
entryRuleAtomExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomExpressionRule()); }
	iv_ruleAtomExpression=ruleAtomExpression
	{ $current=$iv_ruleAtomExpression.current; }
	EOF;

// Rule AtomExpression
ruleAtomExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAtomExpressionAccess().getStaticEntityRefAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomExpressionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getAtomExpressionAccess().getReferenceEntityCrossReference_1_0());
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
