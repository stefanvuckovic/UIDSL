/**
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.domainToDto.domainToDTO.util;

import com.stefanvuckovic.domainToDto.domainToDTO.*;

import com.stefanvuckovic.domainmodel.domainModel.Expression;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.stefanvuckovic.domainToDto.domainToDTO.DomainToDTOPackage
 * @generated
 */
public class DomainToDTOAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DomainToDTOPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainToDTOAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DomainToDTOPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainToDTOSwitch<Adapter> modelSwitch =
    new DomainToDTOSwitch<Adapter>()
    {
      @Override
      public Adapter caseMappingModel(MappingModel object)
      {
        return createMappingModelAdapter();
      }
      @Override
      public Adapter caseMapper(Mapper object)
      {
        return createMapperAdapter();
      }
      @Override
      public Adapter caseMappedAttribute(MappedAttribute object)
      {
        return createMappedAttributeAdapter();
      }
      @Override
      public Adapter caseEntityMappingExpression(EntityMappingExpression object)
      {
        return createEntityMappingExpressionAdapter();
      }
      @Override
      public Adapter caseAtomExpression(AtomExpression object)
      {
        return createAtomExpressionAdapter();
      }
      @Override
      public Adapter caseMemberSelectionExpression(MemberSelectionExpression object)
      {
        return createMemberSelectionExpressionAdapter();
      }
      @Override
      public Adapter caseStaticEntityRef(StaticEntityRef object)
      {
        return createStaticEntityRefAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.stefanvuckovic.domainToDto.domainToDTO.MappingModel <em>Mapping Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.stefanvuckovic.domainToDto.domainToDTO.MappingModel
   * @generated
   */
  public Adapter createMappingModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.stefanvuckovic.domainToDto.domainToDTO.Mapper <em>Mapper</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.stefanvuckovic.domainToDto.domainToDTO.Mapper
   * @generated
   */
  public Adapter createMapperAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.stefanvuckovic.domainToDto.domainToDTO.MappedAttribute <em>Mapped Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.stefanvuckovic.domainToDto.domainToDTO.MappedAttribute
   * @generated
   */
  public Adapter createMappedAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.stefanvuckovic.domainToDto.domainToDTO.EntityMappingExpression <em>Entity Mapping Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.stefanvuckovic.domainToDto.domainToDTO.EntityMappingExpression
   * @generated
   */
  public Adapter createEntityMappingExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.stefanvuckovic.domainToDto.domainToDTO.AtomExpression <em>Atom Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.stefanvuckovic.domainToDto.domainToDTO.AtomExpression
   * @generated
   */
  public Adapter createAtomExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.stefanvuckovic.domainToDto.domainToDTO.MemberSelectionExpression <em>Member Selection Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.stefanvuckovic.domainToDto.domainToDTO.MemberSelectionExpression
   * @generated
   */
  public Adapter createMemberSelectionExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.stefanvuckovic.domainToDto.domainToDTO.StaticEntityRef <em>Static Entity Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.stefanvuckovic.domainToDto.domainToDTO.StaticEntityRef
   * @generated
   */
  public Adapter createStaticEntityRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.stefanvuckovic.domainmodel.domainModel.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.stefanvuckovic.domainmodel.domainModel.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DomainToDTOAdapterFactory
