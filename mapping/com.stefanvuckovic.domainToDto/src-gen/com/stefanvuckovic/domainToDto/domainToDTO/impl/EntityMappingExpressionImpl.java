/**
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.domainToDto.domainToDTO.impl;

import com.stefanvuckovic.domainToDto.domainToDTO.DomainToDTOPackage;
import com.stefanvuckovic.domainToDto.domainToDTO.EntityMappingExpression;
import com.stefanvuckovic.domainToDto.domainToDTO.Mapper;

import com.stefanvuckovic.domainmodel.domainModel.Expression;

import com.stefanvuckovic.domainmodel.domainModel.impl.ExpressionImpl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Entity Mapping Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.stefanvuckovic.domainToDto.domainToDTO.impl.EntityMappingExpressionImpl#getMappedEntity <em>Mapped Entity</em>}</li>
 *   <li>{@link com.stefanvuckovic.domainToDto.domainToDTO.impl.EntityMappingExpressionImpl#getMapper <em>Mapper</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EntityMappingExpressionImpl extends ExpressionImpl implements EntityMappingExpression
{
  /**
   * The cached value of the '{@link #getMappedEntity() <em>Mapped Entity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMappedEntity()
   * @generated
   * @ordered
   */
  protected Expression mappedEntity;

  /**
   * The cached value of the '{@link #getMapper() <em>Mapper</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMapper()
   * @generated
   * @ordered
   */
  protected Mapper mapper;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EntityMappingExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DomainToDTOPackage.Literals.ENTITY_MAPPING_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getMappedEntity()
  {
    return mappedEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMappedEntity(Expression newMappedEntity, NotificationChain msgs)
  {
    Expression oldMappedEntity = mappedEntity;
    mappedEntity = newMappedEntity;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPED_ENTITY, oldMappedEntity, newMappedEntity);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMappedEntity(Expression newMappedEntity)
  {
    if (newMappedEntity != mappedEntity)
    {
      NotificationChain msgs = null;
      if (mappedEntity != null)
        msgs = ((InternalEObject)mappedEntity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPED_ENTITY, null, msgs);
      if (newMappedEntity != null)
        msgs = ((InternalEObject)newMappedEntity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPED_ENTITY, null, msgs);
      msgs = basicSetMappedEntity(newMappedEntity, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPED_ENTITY, newMappedEntity, newMappedEntity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Mapper getMapper()
  {
    if (mapper != null && mapper.eIsProxy())
    {
      InternalEObject oldMapper = (InternalEObject)mapper;
      mapper = (Mapper)eResolveProxy(oldMapper);
      if (mapper != oldMapper)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPER, oldMapper, mapper));
      }
    }
    return mapper;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Mapper basicGetMapper()
  {
    return mapper;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMapper(Mapper newMapper)
  {
    Mapper oldMapper = mapper;
    mapper = newMapper;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPER, oldMapper, mapper));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPED_ENTITY:
        return basicSetMappedEntity(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPED_ENTITY:
        return getMappedEntity();
      case DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPER:
        if (resolve) return getMapper();
        return basicGetMapper();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPED_ENTITY:
        setMappedEntity((Expression)newValue);
        return;
      case DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPER:
        setMapper((Mapper)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPED_ENTITY:
        setMappedEntity((Expression)null);
        return;
      case DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPER:
        setMapper((Mapper)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPED_ENTITY:
        return mappedEntity != null;
      case DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION__MAPPER:
        return mapper != null;
    }
    return super.eIsSet(featureID);
  }

} //EntityMappingExpressionImpl
