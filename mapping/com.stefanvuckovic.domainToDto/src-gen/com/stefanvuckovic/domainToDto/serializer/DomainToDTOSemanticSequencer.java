/*
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.domainToDto.serializer;

import com.google.inject.Inject;
import com.stefanvuckovic.domainToDto.domainToDTO.DomainToDTOPackage;
import com.stefanvuckovic.domainToDto.domainToDTO.EntityMappingExpression;
import com.stefanvuckovic.domainToDto.domainToDTO.MappedAttribute;
import com.stefanvuckovic.domainToDto.domainToDTO.Mapper;
import com.stefanvuckovic.domainToDto.domainToDTO.MappingModel;
import com.stefanvuckovic.domainToDto.domainToDTO.MemberSelectionExpression;
import com.stefanvuckovic.domainToDto.domainToDTO.StaticEntityRef;
import com.stefanvuckovic.domainToDto.services.DomainToDTOGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DomainToDTOSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DomainToDTOGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DomainToDTOPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DomainToDTOPackage.ENTITY_MAPPING_EXPRESSION:
				sequence_EntityMappingExpression(context, (EntityMappingExpression) semanticObject); 
				return; 
			case DomainToDTOPackage.MAPPED_ATTRIBUTE:
				sequence_MappedAttribute(context, (MappedAttribute) semanticObject); 
				return; 
			case DomainToDTOPackage.MAPPER:
				sequence_Mapper(context, (Mapper) semanticObject); 
				return; 
			case DomainToDTOPackage.MAPPING_MODEL:
				sequence_MappingModel(context, (MappingModel) semanticObject); 
				return; 
			case DomainToDTOPackage.MEMBER_SELECTION_EXPRESSION:
				sequence_MemberSelectionExpression(context, (MemberSelectionExpression) semanticObject); 
				return; 
			case DomainToDTOPackage.STATIC_ENTITY_REF:
				sequence_AtomExpression(context, (StaticEntityRef) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns StaticEntityRef
	 *     MemberSelectionExpression returns StaticEntityRef
	 *     MemberSelectionExpression.MemberSelectionExpression_1_0 returns StaticEntityRef
	 *     AtomExpression returns StaticEntityRef
	 *
	 * Constraint:
	 *     reference=[Entity|ID]
	 */
	protected void sequence_AtomExpression(ISerializationContext context, StaticEntityRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainToDTOPackage.Literals.STATIC_ENTITY_REF__REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainToDTOPackage.Literals.STATIC_ENTITY_REF__REFERENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomExpressionAccess().getReferenceEntityIDTerminalRuleCall_1_0_1(), semanticObject.getReference());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns EntityMappingExpression
	 *     EntityMappingExpression returns EntityMappingExpression
	 *
	 * Constraint:
	 *     (mappedEntity=MemberSelectionExpression mapper=[Mapper|ID])
	 */
	protected void sequence_EntityMappingExpression(ISerializationContext context, EntityMappingExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainToDTOPackage.Literals.ENTITY_MAPPING_EXPRESSION__MAPPED_ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainToDTOPackage.Literals.ENTITY_MAPPING_EXPRESSION__MAPPED_ENTITY));
			if (transientValues.isValueTransient(semanticObject, DomainToDTOPackage.Literals.ENTITY_MAPPING_EXPRESSION__MAPPER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainToDTOPackage.Literals.ENTITY_MAPPING_EXPRESSION__MAPPER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityMappingExpressionAccess().getMappedEntityMemberSelectionExpressionParserRuleCall_2_0(), semanticObject.getMappedEntity());
		feeder.accept(grammarAccess.getEntityMappingExpressionAccess().getMapperMapperIDTerminalRuleCall_4_0_1(), semanticObject.getMapper());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MappedAttribute returns MappedAttribute
	 *
	 * Constraint:
	 *     (attr=[Attribute|ID] mapping=Expression)
	 */
	protected void sequence_MappedAttribute(ISerializationContext context, MappedAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainToDTOPackage.Literals.MAPPED_ATTRIBUTE__ATTR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainToDTOPackage.Literals.MAPPED_ATTRIBUTE__ATTR));
			if (transientValues.isValueTransient(semanticObject, DomainToDTOPackage.Literals.MAPPED_ATTRIBUTE__MAPPING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainToDTOPackage.Literals.MAPPED_ATTRIBUTE__MAPPING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMappedAttributeAccess().getAttrAttributeIDTerminalRuleCall_0_0_1(), semanticObject.getAttr());
		feeder.accept(grammarAccess.getMappedAttributeAccess().getMappingExpressionParserRuleCall_2_0(), semanticObject.getMapping());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Mapper returns Mapper
	 *
	 * Constraint:
	 *     (name=ID dto=[DTOClass|ID] attributes+=MappedAttribute*)
	 */
	protected void sequence_Mapper(ISerializationContext context, Mapper semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MappingModel returns MappingModel
	 *
	 * Constraint:
	 *     mappers+=Mapper+
	 */
	protected void sequence_MappingModel(ISerializationContext context, MappingModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns MemberSelectionExpression
	 *     MemberSelectionExpression returns MemberSelectionExpression
	 *     MemberSelectionExpression.MemberSelectionExpression_1_0 returns MemberSelectionExpression
	 *
	 * Constraint:
	 *     (receiver=MemberSelectionExpression_MemberSelectionExpression_1_0 member=[Attribute|ID])
	 */
	protected void sequence_MemberSelectionExpression(ISerializationContext context, MemberSelectionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainToDTOPackage.Literals.MEMBER_SELECTION_EXPRESSION__RECEIVER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainToDTOPackage.Literals.MEMBER_SELECTION_EXPRESSION__RECEIVER));
			if (transientValues.isValueTransient(semanticObject, DomainToDTOPackage.Literals.MEMBER_SELECTION_EXPRESSION__MEMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainToDTOPackage.Literals.MEMBER_SELECTION_EXPRESSION__MEMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMemberSelectionExpressionAccess().getMemberSelectionExpressionReceiverAction_1_0(), semanticObject.getReceiver());
		feeder.accept(grammarAccess.getMemberSelectionExpressionAccess().getMemberAttributeIDTerminalRuleCall_1_2_0_1(), semanticObject.getMember());
		feeder.finish();
	}
	
	
}
