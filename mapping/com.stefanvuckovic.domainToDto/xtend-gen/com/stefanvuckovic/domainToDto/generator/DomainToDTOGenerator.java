/**
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.domainToDto.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.stefanvuckovic.domainToDto.DomainToDTOUtil;
import com.stefanvuckovic.domainToDto.domainToDTO.EntityMappingExpression;
import com.stefanvuckovic.domainToDto.domainToDTO.MappedAttribute;
import com.stefanvuckovic.domainToDto.domainToDTO.Mapper;
import com.stefanvuckovic.domainToDto.domainToDTO.MappingModel;
import com.stefanvuckovic.domainToDto.domainToDTO.MemberSelectionExpression;
import com.stefanvuckovic.domainToDto.domainToDTO.StaticEntityRef;
import com.stefanvuckovic.domainToDto.types.TypeComputing;
import com.stefanvuckovic.domainmodel.domainModel.Attribute;
import com.stefanvuckovic.domainmodel.domainModel.AttributeType;
import com.stefanvuckovic.domainmodel.domainModel.CollectionType;
import com.stefanvuckovic.domainmodel.domainModel.Concept;
import com.stefanvuckovic.domainmodel.domainModel.Entity;
import com.stefanvuckovic.domainmodel.domainModel.Expression;
import com.stefanvuckovic.domainmodel.domainModel.RefType;
import com.stefanvuckovic.domainmodel.domainModel.SingleType;
import com.stefanvuckovic.domainmodel.generator.DomainModelGenerator;
import com.stefanvuckovic.dto.dTO.DTOClass;
import com.stefanvuckovic.dto.generator.DTOGenerator;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DomainToDTOGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private DomainToDTOUtil _domainToDTOUtil;
  
  @Inject
  @Extension
  private TypeComputing _typeComputing;
  
  @Inject
  private DTOGenerator dtoGenerator;
  
  @Inject
  private DomainModelGenerator dmGenerator;
  
  private final String packageName = "mapping";
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<MappingModel> _filter = Iterables.<MappingModel>filter(_iterable, MappingModel.class);
    final MappingModel model = IterableExtensions.<MappingModel>head(_filter);
    EList<Mapper> _mappers = model.getMappers();
    for (final Mapper m : _mappers) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(this.packageName, "");
      _builder.append("/");
      String _name = m.getName();
      _builder.append(_name, "");
      _builder.append(".java");
      CharSequence _compileMapper = this.compileMapper(m);
      fsa.generateFile(_builder.toString(), _compileMapper);
    }
  }
  
  public CharSequence compileMapper(final Mapper m) {
    CharSequence _xblockexpression = null;
    {
      Set<Entity> _mappedEntitiesForMapper = this._domainToDTOUtil.getMappedEntitiesForMapper(m);
      final Function1<Entity, String> _function = (Entity e) -> {
        String _name = e.getName();
        return StringExtensions.toFirstLower(_name);
      };
      Iterable<String> _map = IterableExtensions.<Entity, String>map(_mappedEntitiesForMapper, _function);
      final List<String> variableNames = IterableExtensions.<String>toList(_map);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package ");
      _builder.append(this.packageName, "");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("@org.springframework.stereotype.Component");
      _builder.newLine();
      _builder.append("public class ");
      String _name = m.getName();
      _builder.append(_name, "");
      _builder.append(" {");
      _builder.newLineIfNotEmpty();
      {
        Iterable<Mapper> _usedMappers = this._domainToDTOUtil.getUsedMappers(m);
        for(final Mapper usedMapper : _usedMappers) {
          _builder.append("\t");
          _builder.append("@javax.inject.Inject");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("private ");
          String _name_1 = usedMapper.getName();
          _builder.append(_name_1, "\t");
          _builder.append(" ");
          String _name_2 = usedMapper.getName();
          String _firstLower = StringExtensions.toFirstLower(_name_2);
          _builder.append(_firstLower, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public dto.");
      DTOClass _dto = m.getDto();
      String _name_3 = _dto.getName();
      _builder.append(_name_3, "\t");
      _builder.append(" map(");
      Set<Entity> _mappedEntitiesForMapper_1 = this._domainToDTOUtil.getMappedEntitiesForMapper(m);
      final Function1<Entity, CharSequence> _function_1 = (Entity it) -> {
        return this.compileEntityParam(it);
      };
      Iterable<CharSequence> _map_1 = IterableExtensions.<Entity, CharSequence>map(_mappedEntitiesForMapper_1, _function_1);
      String _join = IterableExtensions.join(_map_1, ", ");
      _builder.append(_join, "\t");
      _builder.append(") {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      DTOClass _dto_1 = m.getDto();
      String _name_4 = _dto_1.getName();
      String _firstLower_1 = StringExtensions.toFirstLower(_name_4);
      final String uniqueDTOName = this.getUniqueFieldNameCurrentContext(variableNames, _firstLower_1);
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      String _xblockexpression_1 = null;
      {
        variableNames.add(uniqueDTOName);
        _xblockexpression_1 = "";
      }
      _builder.append(_xblockexpression_1, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("dto.");
      DTOClass _dto_2 = m.getDto();
      String _name_5 = _dto_2.getName();
      _builder.append(_name_5, "\t\t");
      _builder.append(" ");
      _builder.append(uniqueDTOName, "\t\t");
      _builder.append(" = new dto.");
      DTOClass _dto_3 = m.getDto();
      String _name_6 = _dto_3.getName();
      _builder.append(_name_6, "\t\t");
      _builder.append("();");
      _builder.newLineIfNotEmpty();
      {
        EList<MappedAttribute> _attributes = m.getAttributes();
        for(final MappedAttribute attr : _attributes) {
          _builder.append("\t\t");
          final Entity ent = this._domainToDTOUtil.getMappedEntity(attr);
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("if(");
          String _name_7 = ent.getName();
          String _firstLower_2 = StringExtensions.toFirstLower(_name_7);
          _builder.append(_firstLower_2, "\t\t");
          _builder.append(" != null) {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t");
          CharSequence _compileAttribute = this.compileAttribute(attr, m, uniqueDTOName, variableNames);
          _builder.append(_compileAttribute, "\t\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("}");
          _builder.newLine();
        }
      }
      _builder.append("\t\t");
      _builder.append("return ");
      _builder.append(uniqueDTOName, "\t\t");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence compileAttribute(final MappedAttribute attr, final Mapper m, final String dtoVar, final List<String> currentListOfVariableNames) {
    CharSequence _xblockexpression = null;
    {
      final Expression exp = attr.getMapping();
      final ArrayList<String> nullChecks = CollectionLiterals.<String>newArrayList();
      CharSequence _xifexpression = null;
      if ((exp instanceof EntityMappingExpression)) {
        CharSequence _xblockexpression_1 = null;
        {
          final Expression mapped = ((EntityMappingExpression)exp).getMappedEntity();
          final AttributeType type = this._typeComputing.getType(mapped);
          CharSequence _xifexpression_1 = null;
          if (((type instanceof RefType) && (((RefType) type).getReference() instanceof Entity))) {
            CharSequence _xblockexpression_2 = null;
            {
              final String expr = this.compileExpression(mapped, nullChecks);
              ListExtensions.<String>reverse(nullChecks);
              StringConcatenation _builder = new StringConcatenation();
              {
                boolean _isEmpty = nullChecks.isEmpty();
                boolean _not = (!_isEmpty);
                if (_not) {
                  _builder.append("if(");
                  final Function1<String, String> _function = (String it) -> {
                    return this.addNullCheck(it);
                  };
                  List<String> _map = ListExtensions.<String, String>map(nullChecks, _function);
                  String _join = IterableExtensions.join(_map, " && ");
                  _builder.append(_join, "");
                  _builder.append(") {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append(dtoVar, "\t");
                  _builder.append(".set");
                  Attribute _attr = attr.getAttr();
                  String _name = _attr.getName();
                  String _firstUpper = StringExtensions.toFirstUpper(_name);
                  _builder.append(_firstUpper, "\t");
                  _builder.append("(this.");
                  Mapper _mapper = ((EntityMappingExpression)exp).getMapper();
                  String _name_1 = _mapper.getName();
                  String _firstLower = StringExtensions.toFirstLower(_name_1);
                  _builder.append(_firstLower, "\t");
                  _builder.append(".map(");
                  _builder.append(expr, "\t");
                  _builder.append("));");
                  _builder.newLineIfNotEmpty();
                  _builder.append("}");
                  _builder.newLine();
                } else {
                  _builder.append(dtoVar, "");
                  _builder.append(".set");
                  Attribute _attr_1 = attr.getAttr();
                  String _name_2 = _attr_1.getName();
                  String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
                  _builder.append(_firstUpper_1, "");
                  _builder.append("(this.");
                  Mapper _mapper_1 = ((EntityMappingExpression)exp).getMapper();
                  String _name_3 = _mapper_1.getName();
                  String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
                  _builder.append(_firstLower_1, "");
                  _builder.append(".map(");
                  _builder.append(expr, "");
                  _builder.append("));");
                  _builder.newLineIfNotEmpty();
                }
              }
              _xblockexpression_2 = _builder;
            }
            _xifexpression_1 = _xblockexpression_2;
          } else {
            CharSequence _xifexpression_2 = null;
            if ((type instanceof CollectionType)) {
              CharSequence _xblockexpression_3 = null;
              {
                final SingleType singleType = ((CollectionType)type).getOfType();
                final String compiledExp = this.compileExpression(mapped, nullChecks);
                ListExtensions.<String>reverse(nullChecks);
                nullChecks.add(compiledExp);
                StringConcatenation _builder = new StringConcatenation();
                _builder.append("if(");
                final Function1<String, String> _function = (String it) -> {
                  return this.addNullCheck(it);
                };
                List<String> _map = ListExtensions.<String, String>map(nullChecks, _function);
                String _join = IterableExtensions.join(_map, " && ");
                _builder.append(_join, "");
                _builder.append(") {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                Attribute _attr = attr.getAttr();
                String _name = _attr.getName();
                final String uniqueAttrName = this.getUniqueFieldNameCurrentContext(currentListOfVariableNames, _name);
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                String _xblockexpression_4 = null;
                {
                  currentListOfVariableNames.add(uniqueAttrName);
                  _xblockexpression_4 = "";
                }
                _builder.append(_xblockexpression_4, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                Attribute _attr_1 = attr.getAttr();
                AttributeType _type = _attr_1.getType();
                String _compileWithPackageIncluded = this.dtoGenerator.compileWithPackageIncluded(_type);
                _builder.append(_compileWithPackageIncluded, "\t");
                _builder.append(" ");
                _builder.append(uniqueAttrName, "\t");
                _builder.append(" = new java.util.ArrayList<>();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                final String compiledEntityType = this.dtoGenerator.compileWithPackageIncluded(singleType);
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                String _varNameFromRefType = this.getVarNameFromRefType(((RefType) singleType));
                final String uniqueEntityVar = this.getUniqueFieldNameCurrentContext(currentListOfVariableNames, _varNameFromRefType);
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                String _xblockexpression_5 = null;
                {
                  currentListOfVariableNames.add(uniqueEntityVar);
                  _xblockexpression_5 = "";
                }
                _builder.append(_xblockexpression_5, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("for(");
                _builder.append(compiledEntityType, "\t");
                _builder.append(" ");
                _builder.append(uniqueEntityVar, "\t");
                _builder.append(" : ");
                _builder.append(compiledExp, "\t");
                _builder.append(") {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                Attribute _attr_2 = attr.getAttr();
                AttributeType _type_1 = _attr_2.getType();
                SingleType _ofType = ((CollectionType) _type_1).getOfType();
                final String compiledDTOType = this.dtoGenerator.compileWithPackageIncluded(_ofType);
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                Attribute _attr_3 = attr.getAttr();
                AttributeType _type_2 = _attr_3.getType();
                SingleType _ofType_1 = ((CollectionType) _type_2).getOfType();
                String _varNameFromRefType_1 = this.getVarNameFromRefType(((RefType) _ofType_1));
                final String uniqueDTOVar = this.getUniqueFieldNameCurrentContext(currentListOfVariableNames, _varNameFromRefType_1);
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                String _xblockexpression_6 = null;
                {
                  currentListOfVariableNames.add(uniqueDTOVar);
                  _xblockexpression_6 = "";
                }
                _builder.append(_xblockexpression_6, "\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append(compiledDTOType, "\t\t");
                _builder.append(" ");
                _builder.append(uniqueDTOVar, "\t\t");
                _builder.append(" = this.");
                Mapper _mapper = ((EntityMappingExpression)exp).getMapper();
                String _name_1 = _mapper.getName();
                String _firstLower = StringExtensions.toFirstLower(_name_1);
                _builder.append(_firstLower, "\t\t");
                _builder.append(".map(");
                _builder.append(uniqueEntityVar, "\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("if(");
                _builder.append(uniqueDTOVar, "\t\t");
                _builder.append(" != null) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append(uniqueAttrName, "\t\t\t");
                _builder.append(".add(");
                _builder.append(uniqueDTOVar, "\t\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(dtoVar, "\t");
                _builder.append(".set");
                Attribute _attr_4 = attr.getAttr();
                String _name_2 = _attr_4.getName();
                String _firstUpper = StringExtensions.toFirstUpper(_name_2);
                _builder.append(_firstUpper, "\t");
                _builder.append("(");
                _builder.append(uniqueAttrName, "\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("}");
                _builder.newLine();
                _xblockexpression_3 = _builder;
              }
              _xifexpression_2 = _xblockexpression_3;
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _xblockexpression_1 = _xifexpression_1;
        }
        _xifexpression = _xblockexpression_1;
      } else {
        CharSequence _xblockexpression_2 = null;
        {
          final String expr = this.compileExpression(exp, nullChecks);
          ListExtensions.<String>reverse(nullChecks);
          StringConcatenation _builder = new StringConcatenation();
          {
            boolean _isEmpty = nullChecks.isEmpty();
            boolean _not = (!_isEmpty);
            if (_not) {
              _builder.append("if(");
              final Function1<String, String> _function = (String it) -> {
                return this.addNullCheck(it);
              };
              List<String> _map = ListExtensions.<String, String>map(nullChecks, _function);
              String _join = IterableExtensions.join(_map, " && ");
              _builder.append(_join, "");
              _builder.append(") {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append(dtoVar, "\t");
              _builder.append(".set");
              Attribute _attr = attr.getAttr();
              String _name = _attr.getName();
              String _firstUpper = StringExtensions.toFirstUpper(_name);
              _builder.append(_firstUpper, "\t");
              _builder.append("(");
              _builder.append(expr, "\t");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
              _builder.append("}");
              _builder.newLine();
            } else {
              _builder.append(dtoVar, "");
              _builder.append(".set");
              Attribute _attr_1 = attr.getAttr();
              String _name_1 = _attr_1.getName();
              String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
              _builder.append(_firstUpper_1, "");
              _builder.append("(");
              _builder.append(expr, "");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            }
          }
          _xblockexpression_2 = _builder;
        }
        _xifexpression = _xblockexpression_2;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public String addNullCheck(final String s) {
    return (s + " != null");
  }
  
  public String getVarNameFromRefType(final RefType t) {
    Concept _reference = t.getReference();
    String _name = _reference.getName();
    return StringExtensions.toFirstLower(_name);
  }
  
  public String compileExpression(final Expression e, final List<String> nullCheckExpressions) {
    boolean _matched = false;
    if (e instanceof StaticEntityRef) {
      _matched=true;
      final int size = nullCheckExpressions.size();
      for (int i = 0; (i < size); i++) {
        Entity _reference = ((StaticEntityRef)e).getReference();
        String _name = _reference.getName();
        String _firstLower = StringExtensions.toFirstLower(_name);
        String _plus = (_firstLower + ".");
        String _get = nullCheckExpressions.get(i);
        String _plus_1 = (_plus + _get);
        nullCheckExpressions.set(i, _plus_1);
      }
      Entity _reference = ((StaticEntityRef)e).getReference();
      String _name = _reference.getName();
      return StringExtensions.toFirstLower(_name);
    }
    if (!_matched) {
      if (e instanceof MemberSelectionExpression) {
        _matched=true;
        final Attribute member = ((MemberSelectionExpression)e).getMember();
        final AttributeType memberType = member.getType();
        Attribute _member = ((MemberSelectionExpression)e).getMember();
        AttributeType _type = _member.getType();
        String _ter = this.dmGenerator.getter(_type);
        Attribute _member_1 = ((MemberSelectionExpression)e).getMember();
        String _name = _member_1.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name);
        String _plus = (_ter + _firstUpper);
        final String memberExpression = (_plus + "()");
        final int size = nullCheckExpressions.size();
        for (int i = 0; (i < size); i++) {
          String _get = nullCheckExpressions.get(i);
          String _plus_1 = ((memberExpression + ".") + _get);
          nullCheckExpressions.set(i, _plus_1);
        }
        if (((memberType instanceof RefType) && (((RefType) memberType).getReference() instanceof Entity))) {
          nullCheckExpressions.add(memberExpression);
        }
        Expression _receiver = ((MemberSelectionExpression)e).getReceiver();
        String _compileExpression = this.compileExpression(_receiver, nullCheckExpressions);
        String _plus_1 = (_compileExpression + ".");
        return (_plus_1 + memberExpression);
      }
    }
    return "";
  }
  
  public CharSequence compileEntityParam(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("domain.");
    String _name = e.getName();
    _builder.append(_name, "");
    _builder.append(" ");
    String _name_1 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower, "");
    return _builder;
  }
  
  public String getUniqueFieldNameCurrentContext(final Iterable<String> names, final String name) {
    return this.getUniqueFieldNameCurrentContext(names, name, 0);
  }
  
  public String getUniqueFieldNameCurrentContext(final Iterable<String> names, final String name, final int counter) {
    String _xblockexpression = null;
    {
      String _xifexpression = null;
      if ((counter == 0)) {
        _xifexpression = name;
      } else {
        _xifexpression = (name + Integer.valueOf(counter));
      }
      String currName = _xifexpression;
      for (final String n : names) {
        boolean _equals = Objects.equal(n, currName);
        if (_equals) {
          int newCounter = (counter + 1);
          return this.getUniqueFieldNameCurrentContext(names, name, newCounter);
        }
      }
      _xblockexpression = currName;
    }
    return _xblockexpression;
  }
}
