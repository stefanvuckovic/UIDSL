/*
 * generated by Xtext 2.10.0
 */
grammar InternalDomainToDTO;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.stefanvuckovic.domainToDto.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.stefanvuckovic.domainToDto.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.stefanvuckovic.domainToDto.services.DomainToDTOGrammarAccess;

}
@parser::members {
	private DomainToDTOGrammarAccess grammarAccess;

	public void setGrammarAccess(DomainToDTOGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMappingModel
entryRuleMappingModel
:
{ before(grammarAccess.getMappingModelRule()); }
	 ruleMappingModel
{ after(grammarAccess.getMappingModelRule()); } 
	 EOF 
;

// Rule MappingModel
ruleMappingModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMappingModelAccess().getMappersAssignment()); }
		(rule__MappingModel__MappersAssignment)*
		{ after(grammarAccess.getMappingModelAccess().getMappersAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMapper
entryRuleMapper
:
{ before(grammarAccess.getMapperRule()); }
	 ruleMapper
{ after(grammarAccess.getMapperRule()); } 
	 EOF 
;

// Rule Mapper
ruleMapper 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMapperAccess().getGroup()); }
		(rule__Mapper__Group__0)
		{ after(grammarAccess.getMapperAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMappedAttribute
entryRuleMappedAttribute
:
{ before(grammarAccess.getMappedAttributeRule()); }
	 ruleMappedAttribute
{ after(grammarAccess.getMappedAttributeRule()); } 
	 EOF 
;

// Rule MappedAttribute
ruleMappedAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMappedAttributeAccess().getGroup()); }
		(rule__MappedAttribute__Group__0)
		{ after(grammarAccess.getMappedAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMemberSelectionExpression
entryRuleMemberSelectionExpression
:
{ before(grammarAccess.getMemberSelectionExpressionRule()); }
	 ruleMemberSelectionExpression
{ after(grammarAccess.getMemberSelectionExpressionRule()); } 
	 EOF 
;

// Rule MemberSelectionExpression
ruleMemberSelectionExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMemberSelectionExpressionAccess().getGroup()); }
		(rule__MemberSelectionExpression__Group__0)
		{ after(grammarAccess.getMemberSelectionExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntityMappingExpression
entryRuleEntityMappingExpression
:
{ before(grammarAccess.getEntityMappingExpressionRule()); }
	 ruleEntityMappingExpression
{ after(grammarAccess.getEntityMappingExpressionRule()); } 
	 EOF 
;

// Rule EntityMappingExpression
ruleEntityMappingExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntityMappingExpressionAccess().getGroup()); }
		(rule__EntityMappingExpression__Group__0)
		{ after(grammarAccess.getEntityMappingExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomExpression
entryRuleAtomExpression
:
{ before(grammarAccess.getAtomExpressionRule()); }
	 ruleAtomExpression
{ after(grammarAccess.getAtomExpressionRule()); } 
	 EOF 
;

// Rule AtomExpression
ruleAtomExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomExpressionAccess().getGroup()); }
		(rule__AtomExpression__Group__0)
		{ after(grammarAccess.getAtomExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getMemberSelectionExpressionParserRuleCall_0()); }
		ruleMemberSelectionExpression
		{ after(grammarAccess.getExpressionAccess().getMemberSelectionExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getEntityMappingExpressionParserRuleCall_1()); }
		ruleEntityMappingExpression
		{ after(grammarAccess.getExpressionAccess().getEntityMappingExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapper__Group__0__Impl
	rule__Mapper__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapperAccess().getMapperKeyword_0()); }
	'mapper'
	{ after(grammarAccess.getMapperAccess().getMapperKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapper__Group__1__Impl
	rule__Mapper__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapperAccess().getNameAssignment_1()); }
	(rule__Mapper__NameAssignment_1)
	{ after(grammarAccess.getMapperAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapper__Group__2__Impl
	rule__Mapper__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapperAccess().getDtoKeyword_2()); }
	'dto'
	{ after(grammarAccess.getMapperAccess().getDtoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapper__Group__3__Impl
	rule__Mapper__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapperAccess().getDtoAssignment_3()); }
	(rule__Mapper__DtoAssignment_3)
	{ after(grammarAccess.getMapperAccess().getDtoAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapper__Group__4__Impl
	rule__Mapper__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapperAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getMapperAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapper__Group__5__Impl
	rule__Mapper__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapperAccess().getAttributesAssignment_5()); }
	(rule__Mapper__AttributesAssignment_5)*
	{ after(grammarAccess.getMapperAccess().getAttributesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapper__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapperAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getMapperAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MappedAttribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappedAttribute__Group__0__Impl
	rule__MappedAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MappedAttribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappedAttributeAccess().getAttrAssignment_0()); }
	(rule__MappedAttribute__AttrAssignment_0)
	{ after(grammarAccess.getMappedAttributeAccess().getAttrAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappedAttribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappedAttribute__Group__1__Impl
	rule__MappedAttribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MappedAttribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappedAttributeAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
	'->'
	{ after(grammarAccess.getMappedAttributeAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappedAttribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MappedAttribute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MappedAttribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappedAttributeAccess().getMappingAssignment_2()); }
	(rule__MappedAttribute__MappingAssignment_2)
	{ after(grammarAccess.getMappedAttributeAccess().getMappingAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MemberSelectionExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSelectionExpression__Group__0__Impl
	rule__MemberSelectionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSelectionExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSelectionExpressionAccess().getAtomExpressionParserRuleCall_0()); }
	ruleAtomExpression
	{ after(grammarAccess.getMemberSelectionExpressionAccess().getAtomExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSelectionExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSelectionExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSelectionExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSelectionExpressionAccess().getGroup_1()); }
	(rule__MemberSelectionExpression__Group_1__0)*
	{ after(grammarAccess.getMemberSelectionExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MemberSelectionExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSelectionExpression__Group_1__0__Impl
	rule__MemberSelectionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSelectionExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSelectionExpressionAccess().getMemberSelectionExpressionReceiverAction_1_0()); }
	()
	{ after(grammarAccess.getMemberSelectionExpressionAccess().getMemberSelectionExpressionReceiverAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSelectionExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSelectionExpression__Group_1__1__Impl
	rule__MemberSelectionExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSelectionExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSelectionExpressionAccess().getFullStopKeyword_1_1()); }
	'.'
	{ after(grammarAccess.getMemberSelectionExpressionAccess().getFullStopKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSelectionExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSelectionExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSelectionExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSelectionExpressionAccess().getMemberAssignment_1_2()); }
	(rule__MemberSelectionExpression__MemberAssignment_1_2)
	{ after(grammarAccess.getMemberSelectionExpressionAccess().getMemberAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EntityMappingExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EntityMappingExpression__Group__0__Impl
	rule__EntityMappingExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityMappingExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityMappingExpressionAccess().getEntityMappingExpressionAction_0()); }
	()
	{ after(grammarAccess.getEntityMappingExpressionAccess().getEntityMappingExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityMappingExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EntityMappingExpression__Group__1__Impl
	rule__EntityMappingExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityMappingExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityMappingExpressionAccess().getMapKeyword_1()); }
	'map'
	{ after(grammarAccess.getEntityMappingExpressionAccess().getMapKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityMappingExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EntityMappingExpression__Group__2__Impl
	rule__EntityMappingExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityMappingExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityMappingExpressionAccess().getMappedEntityAssignment_2()); }
	(rule__EntityMappingExpression__MappedEntityAssignment_2)
	{ after(grammarAccess.getEntityMappingExpressionAccess().getMappedEntityAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityMappingExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EntityMappingExpression__Group__3__Impl
	rule__EntityMappingExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityMappingExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityMappingExpressionAccess().getWithKeyword_3()); }
	'with'
	{ after(grammarAccess.getEntityMappingExpressionAccess().getWithKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityMappingExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EntityMappingExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityMappingExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityMappingExpressionAccess().getMapperAssignment_4()); }
	(rule__EntityMappingExpression__MapperAssignment_4)
	{ after(grammarAccess.getEntityMappingExpressionAccess().getMapperAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomExpression__Group__0__Impl
	rule__AtomExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomExpressionAccess().getStaticEntityRefAction_0()); }
	()
	{ after(grammarAccess.getAtomExpressionAccess().getStaticEntityRefAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomExpressionAccess().getReferenceAssignment_1()); }
	(rule__AtomExpression__ReferenceAssignment_1)
	{ after(grammarAccess.getAtomExpressionAccess().getReferenceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MappingModel__MappersAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingModelAccess().getMappersMapperParserRuleCall_0()); }
		ruleMapper
		{ after(grammarAccess.getMappingModelAccess().getMappersMapperParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapperAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMapperAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__DtoAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapperAccess().getDtoDTOClassCrossReference_3_0()); }
		(
			{ before(grammarAccess.getMapperAccess().getDtoDTOClassIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMapperAccess().getDtoDTOClassIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getMapperAccess().getDtoDTOClassCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapper__AttributesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapperAccess().getAttributesMappedAttributeParserRuleCall_5_0()); }
		ruleMappedAttribute
		{ after(grammarAccess.getMapperAccess().getAttributesMappedAttributeParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappedAttribute__AttrAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappedAttributeAccess().getAttrAttributeCrossReference_0_0()); }
		(
			{ before(grammarAccess.getMappedAttributeAccess().getAttrAttributeIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMappedAttributeAccess().getAttrAttributeIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getMappedAttributeAccess().getAttrAttributeCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappedAttribute__MappingAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappedAttributeAccess().getMappingExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getMappedAttributeAccess().getMappingExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSelectionExpression__MemberAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMemberSelectionExpressionAccess().getMemberAttributeCrossReference_1_2_0()); }
		(
			{ before(grammarAccess.getMemberSelectionExpressionAccess().getMemberAttributeIDTerminalRuleCall_1_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMemberSelectionExpressionAccess().getMemberAttributeIDTerminalRuleCall_1_2_0_1()); }
		)
		{ after(grammarAccess.getMemberSelectionExpressionAccess().getMemberAttributeCrossReference_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityMappingExpression__MappedEntityAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityMappingExpressionAccess().getMappedEntityMemberSelectionExpressionParserRuleCall_2_0()); }
		ruleMemberSelectionExpression
		{ after(grammarAccess.getEntityMappingExpressionAccess().getMappedEntityMemberSelectionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityMappingExpression__MapperAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityMappingExpressionAccess().getMapperMapperCrossReference_4_0()); }
		(
			{ before(grammarAccess.getEntityMappingExpressionAccess().getMapperMapperIDTerminalRuleCall_4_0_1()); }
			RULE_ID
			{ after(grammarAccess.getEntityMappingExpressionAccess().getMapperMapperIDTerminalRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getEntityMappingExpressionAccess().getMapperMapperCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomExpression__ReferenceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomExpressionAccess().getReferenceEntityCrossReference_1_0()); }
		(
			{ before(grammarAccess.getAtomExpressionAccess().getReferenceEntityIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAtomExpressionAccess().getReferenceEntityIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getAtomExpressionAccess().getReferenceEntityCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
