/**
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.uidsl.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.stefanvuckovic.domainmodel.domainModel.Attribute;
import com.stefanvuckovic.domainmodel.domainModel.Concept;
import com.stefanvuckovic.domainmodel.domainModel.DomainModelPackage;
import com.stefanvuckovic.domainmodel.domainModel.Expression;
import com.stefanvuckovic.domainmodel.domainModel.RefType;
import com.stefanvuckovic.dto.DTOUtil;
import com.stefanvuckovic.dto.dTO.DTOClass;
import com.stefanvuckovic.dto.scoping.CustomIndex;
import com.stefanvuckovic.uidsl.UIDSLUtil;
import com.stefanvuckovic.uidsl.scoping.AbstractUIDSLScopeProvider;
import com.stefanvuckovic.uidsl.types.TypeComputing;
import com.stefanvuckovic.uidsl.uIDSL.Field;
import com.stefanvuckovic.uidsl.uIDSL.Member;
import com.stefanvuckovic.uidsl.uIDSL.MemberSelectionExpression;
import com.stefanvuckovic.uidsl.uIDSL.Method;
import com.stefanvuckovic.uidsl.uIDSL.ServerComponent;
import com.stefanvuckovic.uidsl.uIDSL.UIDSLPackage;
import com.stefanvuckovic.uidsl.uIDSL.UIModel;
import com.stefanvuckovic.uidsl.uIDSL.Variable;
import java.util.List;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class UIDSLScopeProvider extends AbstractUIDSLScopeProvider {
  @Inject
  @Extension
  private CustomIndex _customIndex;
  
  @Inject
  @Extension
  private TypeComputing _typeComputing;
  
  @Inject
  @Extension
  private DTOUtil _dTOUtil;
  
  @Inject
  @Extension
  private UIDSLUtil _uIDSLUtil;
  
  private final UIDSLPackage pack = UIDSLPackage.eINSTANCE;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xifexpression = null;
    if ((Objects.equal(reference, DomainModelPackage.eINSTANCE.getRefType_Reference()) && 
      (EcoreUtil.getRootContainer(context) instanceof UIModel))) {
      return this.scopeForConcept(context);
    } else {
      IScope _xifexpression_1 = null;
      EReference _variableReference_Ref = this.pack.getVariableReference_Ref();
      boolean _equals = Objects.equal(reference, _variableReference_Ref);
      if (_equals) {
        return this.scopeForVariableReference(context);
      } else {
        IScope _xifexpression_2 = null;
        if ((context instanceof MemberSelectionExpression)) {
          return this.scopeForMemberSelectionExpression(((MemberSelectionExpression)context));
        } else {
          _xifexpression_2 = super.getScope(context, reference);
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  @Override
  public IScope scopeForConcept(final EObject context) {
    List<IEObjectDescription> _listOfVisibleConceptsDescriptionsFromOtherFiles = this._customIndex.getListOfVisibleConceptsDescriptionsFromOtherFiles(context);
    return new SimpleScope(_listOfVisibleConceptsDescriptionsFromOtherFiles);
  }
  
  public IScope scopeForVariableReference(final EObject context) {
    final EObject container = context.eContainer();
    IScope _switchResult = null;
    boolean _matched = false;
    if (container instanceof Method) {
      _matched=true;
      EList<Variable> _params = ((Method)container).getParams();
      _switchResult = Scopes.scopeFor(_params);
    }
    if (!_matched) {
      _switchResult = IScope.NULLSCOPE;
    }
    return _switchResult;
  }
  
  protected IScope scopeForMemberSelectionExpression(final MemberSelectionExpression sel) {
    IScope _xblockexpression = null;
    {
      Expression _receiver = sel.getReceiver();
      final EObject type = this._typeComputing.getType(_receiver);
      if ((Objects.equal(type, null) || (!(type instanceof RefType)))) {
        return IScope.NULLSCOPE;
      }
      final Concept concept = ((RefType) type).getReference();
      IScope _switchResult = null;
      boolean _matched = false;
      if (concept instanceof DTOClass) {
        _matched=true;
        EList<Attribute> _attributes = ((DTOClass)concept).getAttributes();
        Iterable<Attribute> _attributesFromClassHierarchy = this._dTOUtil.getAttributesFromClassHierarchy(((DTOClass)concept));
        IScope _scopeFor = Scopes.scopeFor(_attributesFromClassHierarchy);
        _switchResult = Scopes.scopeFor(_attributes, _scopeFor);
      }
      if (!_matched) {
        if (concept instanceof com.stefanvuckovic.domainmodel.domainModel.Enum) {
          _matched=true;
          EList<Attribute> _attributes = ((com.stefanvuckovic.domainmodel.domainModel.Enum)concept).getAttributes();
          _switchResult = Scopes.scopeFor(_attributes);
        }
      }
      if (!_matched) {
        if (concept instanceof ServerComponent) {
          _matched=true;
          boolean _isIsMethod = sel.isIsMethod();
          if (_isIsMethod) {
            Iterable<Method> _methods = this._uIDSLUtil.getMethods(((ServerComponent)concept));
            Iterable<Field> _fields = this._uIDSLUtil.getFields(((ServerComponent)concept));
            Iterable<Member> _plus = Iterables.<Member>concat(_methods, _fields);
            return Scopes.scopeFor(_plus);
          } else {
            Iterable<Field> _fields_1 = this._uIDSLUtil.getFields(((ServerComponent)concept));
            Iterable<Method> _methods_1 = this._uIDSLUtil.getMethods(((ServerComponent)concept));
            Iterable<Member> _plus_1 = Iterables.<Member>concat(_fields_1, _methods_1);
            return Scopes.scopeFor(_plus_1);
          }
        }
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
}
