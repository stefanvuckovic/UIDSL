/**
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.uidsl.validation;

import com.stefanvuckovic.domainmodel.domainModel.Expression;
import com.stefanvuckovic.domainmodel.domainModel.SelectionMember;
import com.stefanvuckovic.uidsl.uIDSL.Field;
import com.stefanvuckovic.uidsl.uIDSL.MemberSelectionExpression;
import com.stefanvuckovic.uidsl.uIDSL.Method;
import com.stefanvuckovic.uidsl.uIDSL.UIDSLPackage;
import com.stefanvuckovic.uidsl.uIDSL.Variable;
import com.stefanvuckovic.uidsl.validation.AbstractUIDSLValidator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class UIDSLValidator extends AbstractUIDSLValidator {
  @Check
  public void checkNumberOfParametersInMethodCall(final MemberSelectionExpression selection) {
    final SelectionMember member = selection.getMember();
    if ((member instanceof Method)) {
      EList<Variable> _params = ((Method)member).getParams();
      int _size = _params.size();
      EList<Expression> _params_1 = selection.getParams();
      int _size_1 = _params_1.size();
      boolean _notEquals = (_size != _size_1);
      if (_notEquals) {
        EList<Variable> _params_2 = ((Method)member).getParams();
        int _size_2 = _params_2.size();
        String _plus = ("Wrong number of parameters: expected " + Integer.valueOf(_size_2));
        String _plus_1 = (_plus + " but was ");
        EList<Expression> _params_3 = selection.getParams();
        int _size_3 = _params_3.size();
        String _plus_2 = (_plus_1 + Integer.valueOf(_size_3));
        EReference _memberSelectionExpression_Member = UIDSLPackage.eINSTANCE.getMemberSelectionExpression_Member();
        this.error(_plus_2, _memberSelectionExpression_Member);
      }
    }
  }
  
  @Check
  public void checkMemberSelection(final MemberSelectionExpression selection) {
    final SelectionMember member = selection.getMember();
    if (((member instanceof Field) && selection.isIsMethod())) {
      EAttribute _memberSelectionExpression_IsMethod = UIDSLPackage.eINSTANCE.getMemberSelectionExpression_IsMethod();
      this.error(
        "Method invocation on a field", _memberSelectionExpression_IsMethod);
    } else {
      if (((member instanceof Method) && (!selection.isIsMethod()))) {
        EReference _memberSelectionExpression_Member = UIDSLPackage.eINSTANCE.getMemberSelectionExpression_Member();
        this.error(
          "Field selection on a method", _memberSelectionExpression_Member);
      }
    }
  }
}
