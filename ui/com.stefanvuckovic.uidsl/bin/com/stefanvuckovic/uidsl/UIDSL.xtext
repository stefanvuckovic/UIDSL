grammar com.stefanvuckovic.uidsl.UIDSL with com.stefanvuckovic.dto.DTO

generate uIDSL "http://www.stefanvuckovic.com/uidsl/UIDSL"
import "http://www.stefanvuckovic.com/domainmodel/DomainModel" as domainModel


UIModel:
	concepts+=(ServerComponent | UIContainer | UIComponent | DefaultConfigurations | CustomDefaultComponentsDefinition)*
;
	
//UIConcept:
//	ServerComponent | UIContainer | UIComponent
//;

ServerComponent returns domainModel::Concept:
	{ServerComponent} 'server_component' name=ID '{'
		members+=Member*
	'}'
;

Member:
	Field | Method
;

Field:
	TypedConcept ';'
;

Method:
	TypedConcept '(' (params+=Variable (',' params+=Variable)*)? ')' ';'
;

Variable:
	TypedConcept
;

InlineVariable returns Variable:
	{InlineVariable} name = ID
;

fragment TypedConcept *:
	type = AttributeType name=ID
;

UIContainer:
	Page | Template | Fragment
;

Page:
	'page' UIContainerDefinition ServerComponentUsage ('template' ':' template=[Template])?
		'{' elements+=(UIElement|TemplateFragmentOverride)* '}'
;

fragment UIContainerDefinition *:
	name=ID '(' (params+=Variable (',' params+=Variable)*)? ')'
;

fragment ServerComponentUsage *:
	('uses' serverComponents+=Variable (',' serverComponents+=Variable)*)?
;

UIElement:
	Component | 
	LogicElement | 
	FragmentCall
;

UIComponent:
	'component' name=ID '{' 
		properties+=PropertyValue*
		//(child=ChildUIComponent)?
		nested=NestedComponent?
		//('allowed_nested_components' ':' allowedComponents=AllowedNestedComponent)?
	'}'
;

NestedComponent:
	ChildUIComponent | 
	{ExistingNestedComponents} 'allowed_nested_components' ':' nestedComponents=AllowedNestedComponents
;

ChildUIComponent:
	'child_component' 'cardinality' '=' cardinality=CardinalityType ':' comp=UIComponent
;

AllowedNestedComponents:
	{AllAllowedComponents} 'ALL' |
	//{NoneAllowed} 'NONE' |
	{CustomAllowedComponents} components+=[UIComponent] (',' components+=[UIComponent])* 
;

PropertyValue:
	name=ID required?='required'? valueProperty?='valueProperty'? ':' type=TypeExpression
;

Component: 
	UIComponentInstance |
	DefaultUIComponent
;

UIComponentInstance:
	{UIComponentInstance} '#'component=[UIComponent] properties+=PropertyValueInstance* 
		('{' childElements+=Component* '}')?
;

LogicElement:
	IFStatement | Iterator	
;

IFStatement:
	'if' expression=Expression '{'
		elements+=UIElement*
	'}'
; 

Iterator:
	'for' expression=IterationExpression '{'
		elements+=UIElement*
	'}'
;

PropertyValueInstance:
	{PropertyValueInstance} property=[PropertyValue] ':' value=Expression
;

Template:
	'template' name=ID ServerComponentUsage
		'{' 
			elements+=(UIElement|TemplateFragment)*		
		'}'	
;

TemplateFragment returns UIElement:
	{TemplateFragment} name=ID '{'
		elements+=UIElement*
	'}'
;

TemplateFragmentOverride returns UIElement:
	{TemplateFragmentOverride} 'override' overridenFragment=[TemplateFragment] '{'
		elements+=UIElement*
	'}'
;

Fragment:
	'fragment' UIContainerDefinition ServerComponentUsage
		'{' elements+=UIElement* '}'
;

//overriding abstract rule from domainModel dsl
Expression returns domainModel::Expression:
	MemberSelectionExpression |
	PageCall |
	IterationExpression
;

IterationExpression:
	var=InlineVariable 'in' expression=Expression
;

MemberSelectionExpression returns domainModel::Expression:
	AtomExpression
	(
		{MemberSelectionExpression.receiver=current} '.'
		member=[domainModel::SelectionMember]
		(isMethod?='('
			(Params)? ')'
		)?
	)*
;

PageCall returns domainModel::Expression:
	{PageCall} page=[Page] '(' (Params)? ')'
;

FragmentCall:
	frag=[Fragment] '(' (Params)? ')'
;

fragment Params *:
	params+=Expression (',' params+=Expression)*
;

AtomExpression returns domainModel::Expression:
	Constant |
	{VariableReference} ref = [Variable]
;

SelectionMember returns domainModel::SelectionMember:
	super |
	Member
;

AttributeType returns domainModel::AttributeType :
	super |
	VoidType
;

GeneralType returns domainModel::AttributeType:
	{ObjectGeneralType} 'object' |
	{EnumGeneralType} 'enum' |
	{CollectionGeneralType} 'collection'
;

AnyType returns domainModel::AttributeType:
	{AnyType} 'any'
;

PageType returns domainModel::AttributeType:
	{PageType} 'page'
;

VoidType returns domainModel::AttributeType:
	{VoidType} 'void'
;

AlternativeType returns domainModel::AttributeType:
	{AlternativeType} types+=(AttributeType | GeneralType | PageType) 'or' types+=(AttributeType | GeneralType | PageType) ('or' types+=(AttributeType | GeneralType | PageType))*  
	//(AttributeType | GeneralType | PageType) ({AlternativeType.types+=current} 'or' types+=(AttributeType | GeneralType | PageType))*
;

TypeExpression:
	{SimpleType} type = (AttributeType | AlternativeType | GeneralType | AnyType | PageType) |
	PropertyRuntimeType |
	PropertySingleRuntimeType
;

PropertyRuntimeType:
	'typeOf' '(' property = [PropertyValue] ')'
;

//when property type is collection and we need type of object that collection stores
PropertySingleRuntimeType:
	'singleTypeOf' '(' propertyType = PropertyRuntimeType ')'
;

//defaults

DefaultConfigurations :
	'defaults' name=ID '{'
		defaults+=DefaultComponentConfig*
	'}'
;

DefaultComponentConfig:
	'default' 'for' type = (BasicType | GeneralType) '{'
		'input_component' ':' inputComp=[UIComponent]
		'output_component' ':' outputComp=[UIComponent]
	'}'
;

DefaultUIComponent returns DefaultComponent:
	{InputUIComponent} 'input' '(' value = MemberSelectionExpression ')' |
	{OutputUIComponent} 'output' '(' value = MemberSelectionExpression ')'
;

CustomDefaultComponentsDefinition:
	'custom' 'defaults' name=ID '{'
		defaults+=CustomDefaultComponentDefinition+		
	'}'
;

CustomDefaultComponentDefinition:
	'define' compType=('input'|'output') '(' type=Variable ')' ('implicit_variables' implicits+=Variable (',' implicits+=Variable)*)? '{'
		elements+=UIElement*
	'}'
;
