/*
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.uidsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.stefanvuckovic.domainmodel.services.DomainModelGrammarAccess;
import com.stefanvuckovic.dto.services.DTOGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UIDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class UIModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.UIModel");
		private final Assignment cConceptsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConceptsUIConceptParserRuleCall_0 = (RuleCall)cConceptsAssignment.eContents().get(0);
		
		//UIModel:
		//	concepts+=UIConcept*;
		@Override public ParserRule getRule() { return rule; }
		
		//concepts+=UIConcept*
		public Assignment getConceptsAssignment() { return cConceptsAssignment; }
		
		//UIConcept
		public RuleCall getConceptsUIConceptParserRuleCall_0() { return cConceptsUIConceptParserRuleCall_0; }
	}
	public class UIConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.UIConcept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cServerComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUIContainerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UIConcept:
		//	ServerComponent | UIContainer;
		@Override public ParserRule getRule() { return rule; }
		
		//ServerComponent | UIContainer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ServerComponent
		public RuleCall getServerComponentParserRuleCall_0() { return cServerComponentParserRuleCall_0; }
		
		//UIContainer
		public RuleCall getUIContainerParserRuleCall_1() { return cUIContainerParserRuleCall_1; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.Concept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConceptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cServerComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Concept domainModel::Concept:
		//	super | ServerComponent
		@Override public ParserRule getRule() { return rule; }
		
		//super | ServerComponent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//super
		public RuleCall getConceptParserRuleCall_0() { return cConceptParserRuleCall_0; }
		
		//ServerComponent
		public RuleCall getServerComponentParserRuleCall_1() { return cServerComponentParserRuleCall_1; }
	}
	public class ServerComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.ServerComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServer_componentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersMemberParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionsExpressionParserRuleCall_4_0 = (RuleCall)cExpressionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ServerComponent:
		//	'server_component' name=ID '{'
		//	members+=Member*
		//	expressions+=Expression*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'server_component' name=ID '{' members+=Member* expressions+=Expression* '}'
		public Group getGroup() { return cGroup; }
		
		//'server_component'
		public Keyword getServer_componentKeyword_0() { return cServer_componentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//members+=Member*
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_3_0() { return cMembersMemberParserRuleCall_3_0; }
		
		//expressions+=Expression*
		public Assignment getExpressionsAssignment_4() { return cExpressionsAssignment_4; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_4_0() { return cExpressionsExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Member:
		//	Field | Method;
		@Override public ParserRule getRule() { return rule; }
		
		//Field | Method
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }
		
		//Method
		public RuleCall getMethodParserRuleCall_1() { return cMethodParserRuleCall_1; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypedConceptParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Field:
		//	TypedConcept ';';
		@Override public ParserRule getRule() { return rule; }
		
		//TypedConcept ';'
		public Group getGroup() { return cGroup; }
		
		//TypedConcept
		public RuleCall getTypedConceptParserRuleCall_0() { return cTypedConceptParserRuleCall_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypedConceptParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsVariableParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsVariableParserRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Method:
		//	TypedConcept '(' params+=Variable (',' params+=Variable)* ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//TypedConcept '(' params+=Variable (',' params+=Variable)* ')' ';'
		public Group getGroup() { return cGroup; }
		
		//TypedConcept
		public RuleCall getTypedConceptParserRuleCall_0() { return cTypedConceptParserRuleCall_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//params+=Variable
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }
		
		//Variable
		public RuleCall getParamsVariableParserRuleCall_2_0() { return cParamsVariableParserRuleCall_2_0; }
		
		//(',' params+=Variable)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//params+=Variable
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }
		
		//Variable
		public RuleCall getParamsVariableParserRuleCall_3_1_0() { return cParamsVariableParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.Variable");
		private final RuleCall cTypedConceptParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Variable:
		//	TypedConcept;
		@Override public ParserRule getRule() { return rule; }
		
		//TypedConcept
		public RuleCall getTypedConceptParserRuleCall() { return cTypedConceptParserRuleCall; }
	}
	public class TypedConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.TypedConcept");
		private final Group cGroup = (Group)rule.eContents().get(0);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAttributeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//fragment TypedConcept *:
		//	type=AttributeType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=AttributeType name=ID
		public Group getGroup() { return cGroup; }
		
		//type=AttributeType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_0_0() { return cTypeAttributeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class UIContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.UIContainer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTemplateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFragmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//UIContainer:
		//	Page | Template | Fragment;
		@Override public ParserRule getRule() { return rule; }
		
		//Page | Template | Fragment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Page
		public RuleCall getPageParserRuleCall_0() { return cPageParserRuleCall_0; }
		
		//Template
		public RuleCall getTemplateParserRuleCall_1() { return cTemplateParserRuleCall_1; }
		
		//Fragment
		public RuleCall getFragmentParserRuleCall_2() { return cFragmentParserRuleCall_2; }
	}
	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.Page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Page:
		//	'page' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'page' name=ID
		public Group getGroup() { return cGroup; }
		
		//'page'
		public Keyword getPageKeyword_0() { return cPageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.Template");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Template:
		//	'template' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'template' name=ID
		public Group getGroup() { return cGroup; }
		
		//'template'
		public Keyword getTemplateKeyword_0() { return cTemplateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.Fragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFragmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Fragment:
		//	'fragment' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'fragment' name=ID
		public Group getGroup() { return cGroup; }
		
		//'fragment'
		public Keyword getFragmentKeyword_0() { return cFragmentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.Expression");
		private final RuleCall cMemberSelectionExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////overriding abstract rule from domainModel dsl
		//Expression domainModel::Expression:
		//	MemberSelectionExpression
		@Override public ParserRule getRule() { return rule; }
		
		//MemberSelectionExpression
		public RuleCall getMemberSelectionExpressionParserRuleCall() { return cMemberSelectionExpressionParserRuleCall; }
	}
	public class MemberSelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.MemberSelectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMemberSelectionExpressionReceiverAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMemberAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cMemberSelectionMemberCrossReference_1_2_0 = (CrossReference)cMemberAssignment_1_2.eContents().get(0);
		private final RuleCall cMemberSelectionMemberIDTerminalRuleCall_1_2_0_1 = (RuleCall)cMemberSelectionMemberCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cIsMethodAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final Keyword cIsMethodLeftParenthesisKeyword_1_3_0_0 = (Keyword)cIsMethodAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Assignment cParamsAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_1_3_1_0_0 = (RuleCall)cParamsAssignment_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_3_1_1 = (Group)cGroup_1_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_1_0 = (Keyword)cGroup_1_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_3_1_1_1 = (Assignment)cGroup_1_3_1_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_1_3_1_1_1_0 = (RuleCall)cParamsAssignment_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//MemberSelectionExpression domainModel::Expression:
		//	AtomExpression ({MemberSelectionExpression.receiver=current} '.'
		//	member=[domainModel::SelectionMember] (isMethod?='(' (params+=Expression (',' params+=Expression)*)? ')')?)*
		@Override public ParserRule getRule() { return rule; }
		
		//AtomExpression ({MemberSelectionExpression.receiver=current} '.' member=[domainModel::SelectionMember] (isMethod?='('
		//(params+=Expression (',' params+=Expression)*)? ')')?)*
		public Group getGroup() { return cGroup; }
		
		//AtomExpression
		public RuleCall getAtomExpressionParserRuleCall_0() { return cAtomExpressionParserRuleCall_0; }
		
		//({MemberSelectionExpression.receiver=current} '.' member=[domainModel::SelectionMember] (isMethod?='('
		//(params+=Expression (',' params+=Expression)*)? ')')?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MemberSelectionExpression.receiver=current}
		public Action getMemberSelectionExpressionReceiverAction_1_0() { return cMemberSelectionExpressionReceiverAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//member=[domainModel::SelectionMember]
		public Assignment getMemberAssignment_1_2() { return cMemberAssignment_1_2; }
		
		//[domainModel::SelectionMember]
		public CrossReference getMemberSelectionMemberCrossReference_1_2_0() { return cMemberSelectionMemberCrossReference_1_2_0; }
		
		//ID
		public RuleCall getMemberSelectionMemberIDTerminalRuleCall_1_2_0_1() { return cMemberSelectionMemberIDTerminalRuleCall_1_2_0_1; }
		
		//(isMethod?='(' (params+=Expression (',' params+=Expression)*)? ')')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//isMethod?='('
		public Assignment getIsMethodAssignment_1_3_0() { return cIsMethodAssignment_1_3_0; }
		
		//'('
		public Keyword getIsMethodLeftParenthesisKeyword_1_3_0_0() { return cIsMethodLeftParenthesisKeyword_1_3_0_0; }
		
		//(params+=Expression (',' params+=Expression)*)?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//params+=Expression
		public Assignment getParamsAssignment_1_3_1_0() { return cParamsAssignment_1_3_1_0; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_1_3_1_0_0() { return cParamsExpressionParserRuleCall_1_3_1_0_0; }
		
		//(',' params+=Expression)*
		public Group getGroup_1_3_1_1() { return cGroup_1_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_3_1_1_0() { return cCommaKeyword_1_3_1_1_0; }
		
		//params+=Expression
		public Assignment getParamsAssignment_1_3_1_1_1() { return cParamsAssignment_1_3_1_1_1; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_1_3_1_1_1_0() { return cParamsExpressionParserRuleCall_1_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3_2() { return cRightParenthesisKeyword_1_3_2; }
	}
	public class AtomExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.AtomExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableReferenceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cRefVariableCrossReference_1_1_0 = (CrossReference)cRefAssignment_1_1.eContents().get(0);
		private final RuleCall cRefVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRefVariableCrossReference_1_1_0.eContents().get(1);
		
		//AtomExpression domainModel::Expression:
		//	Constant | {VariableReference} ref=[Variable]
		@Override public ParserRule getRule() { return rule; }
		
		//Constant | {VariableReference} ref=[Variable]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }
		
		//{VariableReference} ref=[Variable]
		public Group getGroup_1() { return cGroup_1; }
		
		//{VariableReference}
		public Action getVariableReferenceAction_1_0() { return cVariableReferenceAction_1_0; }
		
		//ref=[Variable]
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }
		
		//[Variable]
		public CrossReference getRefVariableCrossReference_1_1_0() { return cRefVariableCrossReference_1_1_0; }
		
		//ID
		public RuleCall getRefVariableIDTerminalRuleCall_1_1_0_1() { return cRefVariableIDTerminalRuleCall_1_1_0_1; }
	}
	public class SelectionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.uidsl.UIDSL.SelectionMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectionMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SelectionMember domainModel::SelectionMember:
		//	super | Member
		@Override public ParserRule getRule() { return rule; }
		
		//super | Member
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//super
		public RuleCall getSelectionMemberParserRuleCall_0() { return cSelectionMemberParserRuleCall_0; }
		
		//Member
		public RuleCall getMemberParserRuleCall_1() { return cMemberParserRuleCall_1; }
	}
	
	
	private final UIModelElements pUIModel;
	private final UIConceptElements pUIConcept;
	private final ConceptElements pConcept;
	private final ServerComponentElements pServerComponent;
	private final MemberElements pMember;
	private final FieldElements pField;
	private final MethodElements pMethod;
	private final VariableElements pVariable;
	private final TypedConceptElements pTypedConcept;
	private final UIContainerElements pUIContainer;
	private final PageElements pPage;
	private final TemplateElements pTemplate;
	private final FragmentElements pFragment;
	private final ExpressionElements pExpression;
	private final MemberSelectionExpressionElements pMemberSelectionExpression;
	private final AtomExpressionElements pAtomExpression;
	private final SelectionMemberElements pSelectionMember;
	
	private final Grammar grammar;
	
	private final DTOGrammarAccess gaDTO;
	
	private final DomainModelGrammarAccess gaDomainModel;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UIDSLGrammarAccess(GrammarProvider grammarProvider,
			DTOGrammarAccess gaDTO,
			DomainModelGrammarAccess gaDomainModel,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDTO = gaDTO;
		this.gaDomainModel = gaDomainModel;
		this.gaTerminals = gaTerminals;
		this.pUIModel = new UIModelElements();
		this.pUIConcept = new UIConceptElements();
		this.pConcept = new ConceptElements();
		this.pServerComponent = new ServerComponentElements();
		this.pMember = new MemberElements();
		this.pField = new FieldElements();
		this.pMethod = new MethodElements();
		this.pVariable = new VariableElements();
		this.pTypedConcept = new TypedConceptElements();
		this.pUIContainer = new UIContainerElements();
		this.pPage = new PageElements();
		this.pTemplate = new TemplateElements();
		this.pFragment = new FragmentElements();
		this.pExpression = new ExpressionElements();
		this.pMemberSelectionExpression = new MemberSelectionExpressionElements();
		this.pAtomExpression = new AtomExpressionElements();
		this.pSelectionMember = new SelectionMemberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.stefanvuckovic.uidsl.UIDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DTOGrammarAccess getDTOGrammarAccess() {
		return gaDTO;
	}
	
	public DomainModelGrammarAccess getDomainModelGrammarAccess() {
		return gaDomainModel;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UIModel:
	//	concepts+=UIConcept*;
	public UIModelElements getUIModelAccess() {
		return pUIModel;
	}
	
	public ParserRule getUIModelRule() {
		return getUIModelAccess().getRule();
	}
	
	//UIConcept:
	//	ServerComponent | UIContainer;
	public UIConceptElements getUIConceptAccess() {
		return pUIConcept;
	}
	
	public ParserRule getUIConceptRule() {
		return getUIConceptAccess().getRule();
	}
	
	//Concept domainModel::Concept:
	//	super | ServerComponent
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//ServerComponent:
	//	'server_component' name=ID '{'
	//	members+=Member*
	//	expressions+=Expression*
	//	'}';
	public ServerComponentElements getServerComponentAccess() {
		return pServerComponent;
	}
	
	public ParserRule getServerComponentRule() {
		return getServerComponentAccess().getRule();
	}
	
	//Member:
	//	Field | Method;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//Field:
	//	TypedConcept ';';
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Method:
	//	TypedConcept '(' params+=Variable (',' params+=Variable)* ')' ';';
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Variable:
	//	TypedConcept;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//fragment TypedConcept *:
	//	type=AttributeType name=ID;
	public TypedConceptElements getTypedConceptAccess() {
		return pTypedConcept;
	}
	
	public ParserRule getTypedConceptRule() {
		return getTypedConceptAccess().getRule();
	}
	
	//UIContainer:
	//	Page | Template | Fragment;
	public UIContainerElements getUIContainerAccess() {
		return pUIContainer;
	}
	
	public ParserRule getUIContainerRule() {
		return getUIContainerAccess().getRule();
	}
	
	//Page:
	//	'page' name=ID;
	public PageElements getPageAccess() {
		return pPage;
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}
	
	//Template:
	//	'template' name=ID;
	public TemplateElements getTemplateAccess() {
		return pTemplate;
	}
	
	public ParserRule getTemplateRule() {
		return getTemplateAccess().getRule();
	}
	
	//Fragment:
	//	'fragment' name=ID;
	public FragmentElements getFragmentAccess() {
		return pFragment;
	}
	
	public ParserRule getFragmentRule() {
		return getFragmentAccess().getRule();
	}
	
	////overriding abstract rule from domainModel dsl
	//Expression domainModel::Expression:
	//	MemberSelectionExpression
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//MemberSelectionExpression domainModel::Expression:
	//	AtomExpression ({MemberSelectionExpression.receiver=current} '.'
	//	member=[domainModel::SelectionMember] (isMethod?='(' (params+=Expression (',' params+=Expression)*)? ')')?)*
	public MemberSelectionExpressionElements getMemberSelectionExpressionAccess() {
		return pMemberSelectionExpression;
	}
	
	public ParserRule getMemberSelectionExpressionRule() {
		return getMemberSelectionExpressionAccess().getRule();
	}
	
	//AtomExpression domainModel::Expression:
	//	Constant | {VariableReference} ref=[Variable]
	public AtomExpressionElements getAtomExpressionAccess() {
		return pAtomExpression;
	}
	
	public ParserRule getAtomExpressionRule() {
		return getAtomExpressionAccess().getRule();
	}
	
	//SelectionMember domainModel::SelectionMember:
	//	super | Member
	public SelectionMemberElements getSelectionMemberAccess() {
		return pSelectionMember;
	}
	
	public ParserRule getSelectionMemberRule() {
		return getSelectionMemberAccess().getRule();
	}
	
	//DTOModel:
	//	concepts+=super::Concept*;
	public DTOGrammarAccess.DTOModelElements getDTOModelAccess() {
		return gaDTO.getDTOModelAccess();
	}
	
	public ParserRule getDTOModelRule() {
		return getDTOModelAccess().getRule();
	}
	
	//Concept domainModel::Concept:
	//	DTOClass | Enum
	public DTOGrammarAccess.ConceptElements getDTOConceptAccess() {
		return gaDTO.getConceptAccess();
	}
	
	public ParserRule getDTOConceptRule() {
		return getDTOConceptAccess().getRule();
	}
	
	//DTOClass:
	//	'class' name=ID ('extends' superType=[DTOClass])? '{'
	//	attributes+=Attribute*
	//	'}';
	public DTOGrammarAccess.DTOClassElements getDTOClassAccess() {
		return gaDTO.getDTOClassAccess();
	}
	
	public ParserRule getDTOClassRule() {
		return getDTOClassAccess().getRule();
	}
	
	//BasicType domainModel::BasicType:
	//	super | {TextType} 'text' | {EmailType} 'email' | {PasswordType} 'password' | {FileType} 'file' | {ImageType} 'image'
	public DTOGrammarAccess.BasicTypeElements getBasicTypeAccess() {
		return gaDTO.getBasicTypeAccess();
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//Model:
	//	concepts+=super::Concept*;
	public DomainModelGrammarAccess.ModelElements getModelAccess() {
		return gaDomainModel.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Entity:
	//	'entity' name=ID ('extends' superType=[Entity])? ('options' '(' options+=EntityOption (',' options+=EntityOption)*
	//	')')? '{'
	//	attributes+=Attribute*
	//	'}';
	public DomainModelGrammarAccess.EntityElements getEntityAccess() {
		return gaDomainModel.getEntityAccess();
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Enum:
	//	'enum' name=ID '{'
	//	attributes+=Attribute*
	//	literals+=EnumLiteral+
	//	'}';
	public DomainModelGrammarAccess.EnumElements getEnumAccess() {
		return gaDomainModel.getEnumAccess();
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}
	
	//EnumLiteral:
	//	name=ID ('(' params+=Constant (',' params+=Constant)* ')')?;
	public DomainModelGrammarAccess.EnumLiteralElements getEnumLiteralAccess() {
		return gaDomainModel.getEnumLiteralAccess();
	}
	
	public ParserRule getEnumLiteralRule() {
		return getEnumLiteralAccess().getRule();
	}
	
	//Constant Expression:
	//	{IntConstant} value=INT | {LongConstant} value=INT 'L' | {StringConstant} value=STRING | {BoolConstant} value=('true'
	//	| 'false') | {DateConstant} day=INT '/' month=INT '/' year=INT | {Null} 'null'
	public DomainModelGrammarAccess.ConstantElements getConstantAccess() {
		return gaDomainModel.getConstantAccess();
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//Option:
	//	EntityOption | AttributeOption;
	public DomainModelGrammarAccess.OptionElements getOptionAccess() {
		return gaDomainModel.getOptionAccess();
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//EntityOption:
	//	{EntityDeleteOption} deleteByFlag?='deleteByFlag' | {InheritanceMappingOption} 'inheritance' '='
	//	inheritanceMapping=InheritanceMappingType;
	public DomainModelGrammarAccess.EntityOptionElements getEntityOptionAccess() {
		return gaDomainModel.getEntityOptionAccess();
	}
	
	public ParserRule getEntityOptionRule() {
		return getEntityOptionAccess().getRule();
	}
	
	//InheritanceMappingType:
	//	type=('SINGLE_TABLE' | 'TABLE_PER_CONCRETE_CLASS' | 'TABLE_PER_CLASS');
	public DomainModelGrammarAccess.InheritanceMappingTypeElements getInheritanceMappingTypeAccess() {
		return gaDomainModel.getInheritanceMappingTypeAccess();
	}
	
	public ParserRule getInheritanceMappingTypeRule() {
		return getInheritanceMappingTypeAccess().getRule();
	}
	
	//Attribute:
	//	type=AttributeType name=ID (options+=AttributeOption (',' options+=AttributeOption)*)? ';';
	public DomainModelGrammarAccess.AttributeElements getAttributeAccess() {
		return gaDomainModel.getAttributeAccess();
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//AttributeType:
	//	SingleType | CollectionType;
	public DomainModelGrammarAccess.AttributeTypeElements getAttributeTypeAccess() {
		return gaDomainModel.getAttributeTypeAccess();
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}
	
	//SingleType:
	//	super::BasicType | RefType;
	public DomainModelGrammarAccess.SingleTypeElements getSingleTypeAccess() {
		return gaDomainModel.getSingleTypeAccess();
	}
	
	public ParserRule getSingleTypeRule() {
		return getSingleTypeAccess().getRule();
	}
	
	//BasicType:
	//	{StringType} 'string' | {IntType} 'int' | {LongType} 'long' | {BoolType} 'boolean' | {DateType} 'date';
	public DomainModelGrammarAccess.BasicTypeElements getDomainModelBasicTypeAccess() {
		return gaDomainModel.getBasicTypeAccess();
	}
	
	public ParserRule getDomainModelBasicTypeRule() {
		return getDomainModelBasicTypeAccess().getRule();
	}
	
	//RefType:
	//	reference=[Concept];
	public DomainModelGrammarAccess.RefTypeElements getRefTypeAccess() {
		return gaDomainModel.getRefTypeAccess();
	}
	
	public ParserRule getRefTypeRule() {
		return getRefTypeAccess().getRule();
	}
	
	//CollectionType:
	//	'List' '<' ofType=SingleType '>';
	public DomainModelGrammarAccess.CollectionTypeElements getCollectionTypeAccess() {
		return gaDomainModel.getCollectionTypeAccess();
	}
	
	public ParserRule getCollectionTypeRule() {
		return getCollectionTypeAccess().getRule();
	}
	
	//AttributeOption:
	//	{Required} required?='required' | {PartOf} partOf?='partOf' | {RelationshipOwner} 'relationshipOwner' '='
	//	relationshipOwner=StaticFieldSelection | {Cardinality} 'reverse_cardinality' '=' card=CardinalityType;
	public DomainModelGrammarAccess.AttributeOptionElements getAttributeOptionAccess() {
		return gaDomainModel.getAttributeOptionAccess();
	}
	
	public ParserRule getAttributeOptionRule() {
		return getAttributeOptionAccess().getRule();
	}
	
	//enum CardinalityType:
	//	One='one' |
	//	Many='many';
	public DomainModelGrammarAccess.CardinalityTypeElements getCardinalityTypeAccess() {
		return gaDomainModel.getCardinalityTypeAccess();
	}
	
	public EnumRule getCardinalityTypeRule() {
		return getCardinalityTypeAccess().getRule();
	}
	
	//StaticFieldSelection:
	//	receiver=[Entity] '.' member=[Attribute];
	public DomainModelGrammarAccess.StaticFieldSelectionElements getStaticFieldSelectionAccess() {
		return gaDomainModel.getStaticFieldSelectionAccess();
	}
	
	public ParserRule getStaticFieldSelectionRule() {
		return getStaticFieldSelectionAccess().getRule();
	}
	
	//SelectionMember:
	//	Attribute;
	public DomainModelGrammarAccess.SelectionMemberElements getDomainModelSelectionMemberAccess() {
		return gaDomainModel.getSelectionMemberAccess();
	}
	
	public ParserRule getDomainModelSelectionMemberRule() {
		return getDomainModelSelectionMemberAccess().getRule();
	}
	
	////this rule should not be used. It just forces creation of feature in base class
	//DumbSelectionMember SelectionMember:
	//	'dumb_selection' type=AttributeType name=ID
	public DomainModelGrammarAccess.DumbSelectionMemberElements getDumbSelectionMemberAccess() {
		return gaDomainModel.getDumbSelectionMemberAccess();
	}
	
	public ParserRule getDumbSelectionMemberRule() {
		return getDumbSelectionMemberAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
