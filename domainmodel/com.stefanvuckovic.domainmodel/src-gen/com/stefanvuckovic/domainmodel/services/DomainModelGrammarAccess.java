/*
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.domainmodel.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DomainModelGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.Model");
		private final Assignment cConceptsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConceptsConceptParserRuleCall_0 = (RuleCall)cConceptsAssignment.eContents().get(0);
		
		//Model:
		//	concepts+=Concept*;
		@Override public ParserRule getRule() { return rule; }
		
		//concepts+=Concept*
		public Assignment getConceptsAssignment() { return cConceptsAssignment; }
		
		//Concept
		public RuleCall getConceptsConceptParserRuleCall_0() { return cConceptsConceptParserRuleCall_0; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.Concept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Concept:
		//	Entity | Enum;
		@Override public ParserRule getRule() { return rule; }
		
		//Entity | Enum
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }
		
		//Enum
		public RuleCall getEnumParserRuleCall_1() { return cEnumParserRuleCall_1; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeEntityCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeEntityCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOptionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cOptionsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cOptionsEntityOptionParserRuleCall_3_2_0 = (RuleCall)cOptionsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cOptionsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cOptionsEntityOptionParserRuleCall_3_3_1_0 = (RuleCall)cOptionsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Entity:
		//	'entity' name=ID ('extends' superType=[Entity])? ('options' '(' options+=EntityOption (',' options+=EntityOption)*
		//	')')? '{'
		//	attributes+=Attribute*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID ('extends' superType=[Entity])? ('options' '(' options+=EntityOption (',' options+=EntityOption)* ')')?
		//'{' attributes+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superType=[Entity])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[Entity]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[Entity]
		public CrossReference getSuperTypeEntityCrossReference_2_1_0() { return cSuperTypeEntityCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperTypeEntityIDTerminalRuleCall_2_1_0_1() { return cSuperTypeEntityIDTerminalRuleCall_2_1_0_1; }
		
		//('options' '(' options+=EntityOption (',' options+=EntityOption)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'options'
		public Keyword getOptionsKeyword_3_0() { return cOptionsKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//options+=EntityOption
		public Assignment getOptionsAssignment_3_2() { return cOptionsAssignment_3_2; }
		
		//EntityOption
		public RuleCall getOptionsEntityOptionParserRuleCall_3_2_0() { return cOptionsEntityOptionParserRuleCall_3_2_0; }
		
		//(',' options+=EntityOption)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//','
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//options+=EntityOption
		public Assignment getOptionsAssignment_3_3_1() { return cOptionsAssignment_3_3_1; }
		
		//EntityOption
		public RuleCall getOptionsEntityOptionParserRuleCall_3_3_1_0() { return cOptionsEntityOptionParserRuleCall_3_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_0() { return cAttributesAttributeParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Assignment cLiteralsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLiteralsEnumLiteralParserRuleCall_4_0 = (RuleCall)cLiteralsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enum:
		//	'enum' name=ID '{'
		//	attributes+=Attribute*
		//	literals+=EnumLiteral+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name=ID '{' attributes+=Attribute* literals+=EnumLiteral+ '}'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//literals+=EnumLiteral+
		public Assignment getLiteralsAssignment_4() { return cLiteralsAssignment_4; }
		
		//EnumLiteral
		public RuleCall getLiteralsEnumLiteralParserRuleCall_4_0() { return cLiteralsEnumLiteralParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.EnumLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsConstantParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParamsConstantParserRuleCall_1_2_1_0 = (RuleCall)cParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//EnumLiteral:
		//	name=ID ('(' params+=Constant (',' params+=Constant)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('(' params+=Constant (',' params+=Constant)* ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('(' params+=Constant (',' params+=Constant)* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//params+=Constant
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }
		
		//Constant
		public RuleCall getParamsConstantParserRuleCall_1_1_0() { return cParamsConstantParserRuleCall_1_1_0; }
		
		//(',' params+=Constant)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//params+=Constant
		public Assignment getParamsAssignment_1_2_1() { return cParamsAssignment_1_2_1; }
		
		//Constant
		public RuleCall getParamsConstantParserRuleCall_1_2_1_0() { return cParamsConstantParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTo_be_implementedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Expression:
		//	{Expression} 'to_be_implemented';
		@Override public ParserRule getRule() { return rule; }
		
		//{Expression} 'to_be_implemented'
		public Group getGroup() { return cGroup; }
		
		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }
		
		//'to_be_implemented'
		public Keyword getTo_be_implementedKeyword_1() { return cTo_be_implementedKeyword_1; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLongConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Keyword cLKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBoolConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_3_1_0_0 = (Keyword)cValueAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_3_1_0_1 = (Keyword)cValueAlternatives_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cDateConstantAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cDayAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDayINTTerminalRuleCall_4_1_0 = (RuleCall)cDayAssignment_4_1.eContents().get(0);
		private final Keyword cSolidusKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cMonthAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cMonthINTTerminalRuleCall_4_3_0 = (RuleCall)cMonthAssignment_4_3.eContents().get(0);
		private final Keyword cSolidusKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cYearAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cYearINTTerminalRuleCall_4_5_0 = (RuleCall)cYearAssignment_4_5.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNullAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNullKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		
		//Constant Expression:
		//	{IntConstant} value=INT | {LongConstant} value=INT 'L' | {StringConstant} value=STRING | {BoolConstant} value=('true'
		//	| 'false') | {DateConstant} day=INT '/' month=INT '/' year=INT | {Null} 'null'
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {LongConstant} value=INT 'L' | {StringConstant} value=STRING | {BoolConstant} value=('true' |
		//'false') | {DateConstant} day=INT '/' month=INT '/' year=INT | {Null} 'null'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{LongConstant} value=INT 'L'
		public Group getGroup_1() { return cGroup_1; }
		
		//{LongConstant}
		public Action getLongConstantAction_1_0() { return cLongConstantAction_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
		
		//'L'
		public Keyword getLKeyword_1_2() { return cLKeyword_1_2; }
		
		//{StringConstant} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringConstant}
		public Action getStringConstantAction_2_0() { return cStringConstantAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_3() { return cGroup_3; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_3_0() { return cBoolConstantAction_3_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_3_1_0_0() { return cValueTrueKeyword_3_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_3_1_0_1() { return cValueFalseKeyword_3_1_0_1; }
		
		//{DateConstant} day=INT '/' month=INT '/' year=INT
		public Group getGroup_4() { return cGroup_4; }
		
		//{DateConstant}
		public Action getDateConstantAction_4_0() { return cDateConstantAction_4_0; }
		
		//day=INT
		public Assignment getDayAssignment_4_1() { return cDayAssignment_4_1; }
		
		//INT
		public RuleCall getDayINTTerminalRuleCall_4_1_0() { return cDayINTTerminalRuleCall_4_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_4_2() { return cSolidusKeyword_4_2; }
		
		//month=INT
		public Assignment getMonthAssignment_4_3() { return cMonthAssignment_4_3; }
		
		//INT
		public RuleCall getMonthINTTerminalRuleCall_4_3_0() { return cMonthINTTerminalRuleCall_4_3_0; }
		
		//'/'
		public Keyword getSolidusKeyword_4_4() { return cSolidusKeyword_4_4; }
		
		//year=INT
		public Assignment getYearAssignment_4_5() { return cYearAssignment_4_5; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_4_5_0() { return cYearINTTerminalRuleCall_4_5_0; }
		
		//{Null} 'null'
		public Group getGroup_5() { return cGroup_5; }
		
		//{Null}
		public Action getNullAction_5_0() { return cNullAction_5_0; }
		
		//'null'
		public Keyword getNullKeyword_5_1() { return cNullKeyword_5_1; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.Option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityOptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Option:
		//	EntityOption | AttributeOption;
		@Override public ParserRule getRule() { return rule; }
		
		//EntityOption | AttributeOption
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EntityOption
		public RuleCall getEntityOptionParserRuleCall_0() { return cEntityOptionParserRuleCall_0; }
		
		//AttributeOption
		public RuleCall getAttributeOptionParserRuleCall_1() { return cAttributeOptionParserRuleCall_1; }
	}
	public class EntityOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.EntityOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEntityDeleteOptionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cDeleteByFlagAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cDeleteByFlagDeleteByFlagKeyword_0_1_0 = (Keyword)cDeleteByFlagAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInheritanceMappingOptionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cInheritanceKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInheritanceMappingAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInheritanceMappingInheritanceMappingTypeParserRuleCall_1_3_0 = (RuleCall)cInheritanceMappingAssignment_1_3.eContents().get(0);
		
		//EntityOption:
		//	{EntityDeleteOption} deleteByFlag?='deleteByFlag' | {InheritanceMappingOption} 'inheritance' '='
		//	inheritanceMapping=InheritanceMappingType;
		@Override public ParserRule getRule() { return rule; }
		
		//{EntityDeleteOption} deleteByFlag?='deleteByFlag' | {InheritanceMappingOption} 'inheritance' '='
		//inheritanceMapping=InheritanceMappingType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{EntityDeleteOption} deleteByFlag?='deleteByFlag'
		public Group getGroup_0() { return cGroup_0; }
		
		//{EntityDeleteOption}
		public Action getEntityDeleteOptionAction_0_0() { return cEntityDeleteOptionAction_0_0; }
		
		//deleteByFlag?='deleteByFlag'
		public Assignment getDeleteByFlagAssignment_0_1() { return cDeleteByFlagAssignment_0_1; }
		
		//'deleteByFlag'
		public Keyword getDeleteByFlagDeleteByFlagKeyword_0_1_0() { return cDeleteByFlagDeleteByFlagKeyword_0_1_0; }
		
		//{InheritanceMappingOption} 'inheritance' '=' inheritanceMapping=InheritanceMappingType
		public Group getGroup_1() { return cGroup_1; }
		
		//{InheritanceMappingOption}
		public Action getInheritanceMappingOptionAction_1_0() { return cInheritanceMappingOptionAction_1_0; }
		
		//'inheritance'
		public Keyword getInheritanceKeyword_1_1() { return cInheritanceKeyword_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//inheritanceMapping=InheritanceMappingType
		public Assignment getInheritanceMappingAssignment_1_3() { return cInheritanceMappingAssignment_1_3; }
		
		//InheritanceMappingType
		public RuleCall getInheritanceMappingInheritanceMappingTypeParserRuleCall_1_3_0() { return cInheritanceMappingInheritanceMappingTypeParserRuleCall_1_3_0; }
	}
	public class InheritanceMappingTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.InheritanceMappingType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeSINGLE_TABLEKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeTABLE_PER_CONCRETE_CLASSKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeTABLE_PER_CLASSKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		
		//InheritanceMappingType:
		//	type=('SINGLE_TABLE' | 'TABLE_PER_CONCRETE_CLASS' | 'TABLE_PER_CLASS');
		@Override public ParserRule getRule() { return rule; }
		
		//type=('SINGLE_TABLE' | 'TABLE_PER_CONCRETE_CLASS' | 'TABLE_PER_CLASS')
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//('SINGLE_TABLE' | 'TABLE_PER_CONCRETE_CLASS' | 'TABLE_PER_CLASS')
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'SINGLE_TABLE'
		public Keyword getTypeSINGLE_TABLEKeyword_0_0() { return cTypeSINGLE_TABLEKeyword_0_0; }
		
		//'TABLE_PER_CONCRETE_CLASS'
		public Keyword getTypeTABLE_PER_CONCRETE_CLASSKeyword_0_1() { return cTypeTABLE_PER_CONCRETE_CLASSKeyword_0_1; }
		
		//'TABLE_PER_CLASS'
		public Keyword getTypeTABLE_PER_CLASSKeyword_0_2() { return cTypeTABLE_PER_CLASSKeyword_0_2; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAttributeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOptionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOptionsAttributeOptionParserRuleCall_2_0_0 = (RuleCall)cOptionsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOptionsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOptionsAttributeOptionParserRuleCall_2_1_1_0 = (RuleCall)cOptionsAssignment_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Attribute:
		//	type=AttributeType name=ID (options+=AttributeOption (',' options+=AttributeOption)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=AttributeType name=ID (options+=AttributeOption (',' options+=AttributeOption)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//type=AttributeType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_0_0() { return cTypeAttributeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(options+=AttributeOption (',' options+=AttributeOption)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//options+=AttributeOption
		public Assignment getOptionsAssignment_2_0() { return cOptionsAssignment_2_0; }
		
		//AttributeOption
		public RuleCall getOptionsAttributeOptionParserRuleCall_2_0_0() { return cOptionsAttributeOptionParserRuleCall_2_0_0; }
		
		//(',' options+=AttributeOption)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//options+=AttributeOption
		public Assignment getOptionsAssignment_2_1_1() { return cOptionsAssignment_2_1_1; }
		
		//AttributeOption
		public RuleCall getOptionsAttributeOptionParserRuleCall_2_1_1_0() { return cOptionsAttributeOptionParserRuleCall_2_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCollectionTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttributeType:
		//	SingleType | CollectionType;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleType | CollectionType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleType
		public RuleCall getSingleTypeParserRuleCall_0() { return cSingleTypeParserRuleCall_0; }
		
		//CollectionType
		public RuleCall getCollectionTypeParserRuleCall_1() { return cCollectionTypeParserRuleCall_1; }
	}
	public class SingleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.SingleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SingleType:
		//	BasicType | RefType;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicType | RefType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }
		
		//RefType
		public RuleCall getRefTypeParserRuleCall_1() { return cRefTypeParserRuleCall_1; }
	}
	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cStringKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIntKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLongTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLongKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBoolTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cBooleanKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cDateTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cDateKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//BasicType:
		//	{StringType} 'string' | {IntType} 'int' | {LongType} 'long' | {BoolType} 'boolean' | {DateType} 'date';
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} 'string' | {IntType} 'int' | {LongType} 'long' | {BoolType} 'boolean' | {DateType} 'date'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StringType} 'string'
		public Group getGroup_0() { return cGroup_0; }
		
		//{StringType}
		public Action getStringTypeAction_0_0() { return cStringTypeAction_0_0; }
		
		//'string'
		public Keyword getStringKeyword_0_1() { return cStringKeyword_0_1; }
		
		//{IntType} 'int'
		public Group getGroup_1() { return cGroup_1; }
		
		//{IntType}
		public Action getIntTypeAction_1_0() { return cIntTypeAction_1_0; }
		
		//'int'
		public Keyword getIntKeyword_1_1() { return cIntKeyword_1_1; }
		
		//{LongType} 'long'
		public Group getGroup_2() { return cGroup_2; }
		
		//{LongType}
		public Action getLongTypeAction_2_0() { return cLongTypeAction_2_0; }
		
		//'long'
		public Keyword getLongKeyword_2_1() { return cLongKeyword_2_1; }
		
		//{BoolType} 'boolean'
		public Group getGroup_3() { return cGroup_3; }
		
		//{BoolType}
		public Action getBoolTypeAction_3_0() { return cBoolTypeAction_3_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_3_1() { return cBooleanKeyword_3_1; }
		
		//{DateType} 'date'
		public Group getGroup_4() { return cGroup_4; }
		
		//{DateType}
		public Action getDateTypeAction_4_0() { return cDateTypeAction_4_0; }
		
		//'date'
		public Keyword getDateKeyword_4_1() { return cDateKeyword_4_1; }
	}
	public class RefTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.RefType");
		private final Assignment cReferenceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferenceConceptCrossReference_0 = (CrossReference)cReferenceAssignment.eContents().get(0);
		private final RuleCall cReferenceConceptIDTerminalRuleCall_0_1 = (RuleCall)cReferenceConceptCrossReference_0.eContents().get(1);
		
		//RefType:
		//	reference=[Concept];
		@Override public ParserRule getRule() { return rule; }
		
		//reference=[Concept]
		public Assignment getReferenceAssignment() { return cReferenceAssignment; }
		
		//[Concept]
		public CrossReference getReferenceConceptCrossReference_0() { return cReferenceConceptCrossReference_0; }
		
		//ID
		public RuleCall getReferenceConceptIDTerminalRuleCall_0_1() { return cReferenceConceptIDTerminalRuleCall_0_1; }
	}
	public class CollectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.CollectionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOfTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOfTypeSingleTypeParserRuleCall_2_0 = (RuleCall)cOfTypeAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CollectionType:
		//	'List' '<' ofType=SingleType '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'List' '<' ofType=SingleType '>'
		public Group getGroup() { return cGroup; }
		
		//'List'
		public Keyword getListKeyword_0() { return cListKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//ofType=SingleType
		public Assignment getOfTypeAssignment_2() { return cOfTypeAssignment_2; }
		
		//SingleType
		public RuleCall getOfTypeSingleTypeParserRuleCall_2_0() { return cOfTypeSingleTypeParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class AttributeOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.AttributeOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRequiredAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cRequiredAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cRequiredRequiredKeyword_0_1_0 = (Keyword)cRequiredAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPartOfAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cPartOfAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cPartOfPartOfKeyword_1_1_0 = (Keyword)cPartOfAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRelationshipOwnerAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cRelationshipOwnerKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cRelationshipOwnerAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRelationshipOwnerStaticFieldSelectionParserRuleCall_2_3_0 = (RuleCall)cRelationshipOwnerAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCardinalityAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cReverse_cardinalityKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cEqualsSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cCardAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cCardCardinalityTypeEnumRuleCall_3_3_0 = (RuleCall)cCardAssignment_3_3.eContents().get(0);
		
		//AttributeOption:
		//	{Required} required?='required' | {PartOf} partOf?='partOf' | {RelationshipOwner} 'relationshipOwner' '='
		//	relationshipOwner=StaticFieldSelection | {Cardinality} 'reverse_cardinality' '=' card=CardinalityType;
		@Override public ParserRule getRule() { return rule; }
		
		//{Required} required?='required' | {PartOf} partOf?='partOf' | {RelationshipOwner} 'relationshipOwner' '='
		//relationshipOwner=StaticFieldSelection | {Cardinality} 'reverse_cardinality' '=' card=CardinalityType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Required} required?='required'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Required}
		public Action getRequiredAction_0_0() { return cRequiredAction_0_0; }
		
		//required?='required'
		public Assignment getRequiredAssignment_0_1() { return cRequiredAssignment_0_1; }
		
		//'required'
		public Keyword getRequiredRequiredKeyword_0_1_0() { return cRequiredRequiredKeyword_0_1_0; }
		
		//{PartOf} partOf?='partOf'
		public Group getGroup_1() { return cGroup_1; }
		
		//{PartOf}
		public Action getPartOfAction_1_0() { return cPartOfAction_1_0; }
		
		//partOf?='partOf'
		public Assignment getPartOfAssignment_1_1() { return cPartOfAssignment_1_1; }
		
		//'partOf'
		public Keyword getPartOfPartOfKeyword_1_1_0() { return cPartOfPartOfKeyword_1_1_0; }
		
		//{RelationshipOwner} 'relationshipOwner' '=' relationshipOwner=StaticFieldSelection
		public Group getGroup_2() { return cGroup_2; }
		
		//{RelationshipOwner}
		public Action getRelationshipOwnerAction_2_0() { return cRelationshipOwnerAction_2_0; }
		
		//'relationshipOwner'
		public Keyword getRelationshipOwnerKeyword_2_1() { return cRelationshipOwnerKeyword_2_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }
		
		//relationshipOwner=StaticFieldSelection
		public Assignment getRelationshipOwnerAssignment_2_3() { return cRelationshipOwnerAssignment_2_3; }
		
		//StaticFieldSelection
		public RuleCall getRelationshipOwnerStaticFieldSelectionParserRuleCall_2_3_0() { return cRelationshipOwnerStaticFieldSelectionParserRuleCall_2_3_0; }
		
		//{Cardinality} 'reverse_cardinality' '=' card=CardinalityType
		public Group getGroup_3() { return cGroup_3; }
		
		//{Cardinality}
		public Action getCardinalityAction_3_0() { return cCardinalityAction_3_0; }
		
		//'reverse_cardinality'
		public Keyword getReverse_cardinalityKeyword_3_1() { return cReverse_cardinalityKeyword_3_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_2() { return cEqualsSignKeyword_3_2; }
		
		//card=CardinalityType
		public Assignment getCardAssignment_3_3() { return cCardAssignment_3_3; }
		
		//CardinalityType
		public RuleCall getCardCardinalityTypeEnumRuleCall_3_3_0() { return cCardCardinalityTypeEnumRuleCall_3_3_0; }
	}
	public class StaticFieldSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.StaticFieldSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReceiverAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReceiverEntityCrossReference_0_0 = (CrossReference)cReceiverAssignment_0.eContents().get(0);
		private final RuleCall cReceiverEntityIDTerminalRuleCall_0_0_1 = (RuleCall)cReceiverEntityCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMemberAttributeCrossReference_2_0 = (CrossReference)cMemberAssignment_2.eContents().get(0);
		private final RuleCall cMemberAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cMemberAttributeCrossReference_2_0.eContents().get(1);
		
		//StaticFieldSelection:
		//	receiver=[Entity] '.' member=[Attribute];
		@Override public ParserRule getRule() { return rule; }
		
		//receiver=[Entity] '.' member=[Attribute]
		public Group getGroup() { return cGroup; }
		
		//receiver=[Entity]
		public Assignment getReceiverAssignment_0() { return cReceiverAssignment_0; }
		
		//[Entity]
		public CrossReference getReceiverEntityCrossReference_0_0() { return cReceiverEntityCrossReference_0_0; }
		
		//ID
		public RuleCall getReceiverEntityIDTerminalRuleCall_0_0_1() { return cReceiverEntityIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//member=[Attribute]
		public Assignment getMemberAssignment_2() { return cMemberAssignment_2; }
		
		//[Attribute]
		public CrossReference getMemberAttributeCrossReference_2_0() { return cMemberAttributeCrossReference_2_0; }
		
		//ID
		public RuleCall getMemberAttributeIDTerminalRuleCall_2_0_1() { return cMemberAttributeIDTerminalRuleCall_2_0_1; }
	}
	public class SelectionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.SelectionMember");
		private final RuleCall cAttributeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SelectionMember:
		//	Attribute;
		@Override public ParserRule getRule() { return rule; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall() { return cAttributeParserRuleCall; }
	}
	public class DumbSelectionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.DumbSelectionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDumb_selectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAttributeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		////this rule should not be used. It just forces creation of feature in base class
		//DumbSelectionMember SelectionMember:
		//	'dumb_selection' type=AttributeType name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//'dumb_selection' type=AttributeType name=ID
		public Group getGroup() { return cGroup; }
		
		//'dumb_selection'
		public Keyword getDumb_selectionKeyword_0() { return cDumb_selectionKeyword_0; }
		
		//type=AttributeType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_1_0() { return cTypeAttributeTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	
	public class CardinalityTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.stefanvuckovic.domainmodel.DomainModel.CardinalityType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneOneKeyword_0_0 = (Keyword)cOneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cManyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cManyManyKeyword_1_0 = (Keyword)cManyEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CardinalityType:
		//	One='one' |
		//	Many='many';
		public EnumRule getRule() { return rule; }
		
		//One='one' | Many='many'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//One='one'
		public EnumLiteralDeclaration getOneEnumLiteralDeclaration_0() { return cOneEnumLiteralDeclaration_0; }
		
		//'one'
		public Keyword getOneOneKeyword_0_0() { return cOneOneKeyword_0_0; }
		
		//Many='many'
		public EnumLiteralDeclaration getManyEnumLiteralDeclaration_1() { return cManyEnumLiteralDeclaration_1; }
		
		//'many'
		public Keyword getManyManyKeyword_1_0() { return cManyManyKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final ConceptElements pConcept;
	private final EntityElements pEntity;
	private final EnumElements pEnum;
	private final EnumLiteralElements pEnumLiteral;
	private final ExpressionElements pExpression;
	private final ConstantElements pConstant;
	private final OptionElements pOption;
	private final EntityOptionElements pEntityOption;
	private final InheritanceMappingTypeElements pInheritanceMappingType;
	private final AttributeElements pAttribute;
	private final AttributeTypeElements pAttributeType;
	private final SingleTypeElements pSingleType;
	private final BasicTypeElements pBasicType;
	private final RefTypeElements pRefType;
	private final CollectionTypeElements pCollectionType;
	private final AttributeOptionElements pAttributeOption;
	private final CardinalityTypeElements eCardinalityType;
	private final StaticFieldSelectionElements pStaticFieldSelection;
	private final SelectionMemberElements pSelectionMember;
	private final DumbSelectionMemberElements pDumbSelectionMember;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DomainModelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pConcept = new ConceptElements();
		this.pEntity = new EntityElements();
		this.pEnum = new EnumElements();
		this.pEnumLiteral = new EnumLiteralElements();
		this.pExpression = new ExpressionElements();
		this.pConstant = new ConstantElements();
		this.pOption = new OptionElements();
		this.pEntityOption = new EntityOptionElements();
		this.pInheritanceMappingType = new InheritanceMappingTypeElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pSingleType = new SingleTypeElements();
		this.pBasicType = new BasicTypeElements();
		this.pRefType = new RefTypeElements();
		this.pCollectionType = new CollectionTypeElements();
		this.pAttributeOption = new AttributeOptionElements();
		this.eCardinalityType = new CardinalityTypeElements();
		this.pStaticFieldSelection = new StaticFieldSelectionElements();
		this.pSelectionMember = new SelectionMemberElements();
		this.pDumbSelectionMember = new DumbSelectionMemberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.stefanvuckovic.domainmodel.DomainModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	concepts+=Concept*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Concept:
	//	Entity | Enum;
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//Entity:
	//	'entity' name=ID ('extends' superType=[Entity])? ('options' '(' options+=EntityOption (',' options+=EntityOption)*
	//	')')? '{'
	//	attributes+=Attribute*
	//	'}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Enum:
	//	'enum' name=ID '{'
	//	attributes+=Attribute*
	//	literals+=EnumLiteral+
	//	'}';
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}
	
	//EnumLiteral:
	//	name=ID ('(' params+=Constant (',' params+=Constant)* ')')?;
	public EnumLiteralElements getEnumLiteralAccess() {
		return pEnumLiteral;
	}
	
	public ParserRule getEnumLiteralRule() {
		return getEnumLiteralAccess().getRule();
	}
	
	//Expression:
	//	{Expression} 'to_be_implemented';
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Constant Expression:
	//	{IntConstant} value=INT | {LongConstant} value=INT 'L' | {StringConstant} value=STRING | {BoolConstant} value=('true'
	//	| 'false') | {DateConstant} day=INT '/' month=INT '/' year=INT | {Null} 'null'
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//Option:
	//	EntityOption | AttributeOption;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//EntityOption:
	//	{EntityDeleteOption} deleteByFlag?='deleteByFlag' | {InheritanceMappingOption} 'inheritance' '='
	//	inheritanceMapping=InheritanceMappingType;
	public EntityOptionElements getEntityOptionAccess() {
		return pEntityOption;
	}
	
	public ParserRule getEntityOptionRule() {
		return getEntityOptionAccess().getRule();
	}
	
	//InheritanceMappingType:
	//	type=('SINGLE_TABLE' | 'TABLE_PER_CONCRETE_CLASS' | 'TABLE_PER_CLASS');
	public InheritanceMappingTypeElements getInheritanceMappingTypeAccess() {
		return pInheritanceMappingType;
	}
	
	public ParserRule getInheritanceMappingTypeRule() {
		return getInheritanceMappingTypeAccess().getRule();
	}
	
	//Attribute:
	//	type=AttributeType name=ID (options+=AttributeOption (',' options+=AttributeOption)*)? ';';
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//AttributeType:
	//	SingleType | CollectionType;
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}
	
	//SingleType:
	//	BasicType | RefType;
	public SingleTypeElements getSingleTypeAccess() {
		return pSingleType;
	}
	
	public ParserRule getSingleTypeRule() {
		return getSingleTypeAccess().getRule();
	}
	
	//BasicType:
	//	{StringType} 'string' | {IntType} 'int' | {LongType} 'long' | {BoolType} 'boolean' | {DateType} 'date';
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//RefType:
	//	reference=[Concept];
	public RefTypeElements getRefTypeAccess() {
		return pRefType;
	}
	
	public ParserRule getRefTypeRule() {
		return getRefTypeAccess().getRule();
	}
	
	//CollectionType:
	//	'List' '<' ofType=SingleType '>';
	public CollectionTypeElements getCollectionTypeAccess() {
		return pCollectionType;
	}
	
	public ParserRule getCollectionTypeRule() {
		return getCollectionTypeAccess().getRule();
	}
	
	//AttributeOption:
	//	{Required} required?='required' | {PartOf} partOf?='partOf' | {RelationshipOwner} 'relationshipOwner' '='
	//	relationshipOwner=StaticFieldSelection | {Cardinality} 'reverse_cardinality' '=' card=CardinalityType;
	public AttributeOptionElements getAttributeOptionAccess() {
		return pAttributeOption;
	}
	
	public ParserRule getAttributeOptionRule() {
		return getAttributeOptionAccess().getRule();
	}
	
	//enum CardinalityType:
	//	One='one' |
	//	Many='many';
	public CardinalityTypeElements getCardinalityTypeAccess() {
		return eCardinalityType;
	}
	
	public EnumRule getCardinalityTypeRule() {
		return getCardinalityTypeAccess().getRule();
	}
	
	//StaticFieldSelection:
	//	receiver=[Entity] '.' member=[Attribute];
	public StaticFieldSelectionElements getStaticFieldSelectionAccess() {
		return pStaticFieldSelection;
	}
	
	public ParserRule getStaticFieldSelectionRule() {
		return getStaticFieldSelectionAccess().getRule();
	}
	
	//SelectionMember:
	//	Attribute;
	public SelectionMemberElements getSelectionMemberAccess() {
		return pSelectionMember;
	}
	
	public ParserRule getSelectionMemberRule() {
		return getSelectionMemberAccess().getRule();
	}
	
	////this rule should not be used. It just forces creation of feature in base class
	//DumbSelectionMember SelectionMember:
	//	'dumb_selection' type=AttributeType name=ID
	public DumbSelectionMemberElements getDumbSelectionMemberAccess() {
		return pDumbSelectionMember;
	}
	
	public ParserRule getDumbSelectionMemberRule() {
		return getDumbSelectionMemberAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
