/**
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.domainmodel.scoping;

import com.google.common.base.Objects;
import com.stefanvuckovic.domainmodel.DomainModelUtil;
import com.stefanvuckovic.domainmodel.domainModel.Attribute;
import com.stefanvuckovic.domainmodel.domainModel.AttributeType;
import com.stefanvuckovic.domainmodel.domainModel.Concept;
import com.stefanvuckovic.domainmodel.domainModel.DomainModelPackage;
import com.stefanvuckovic.domainmodel.domainModel.Entity;
import com.stefanvuckovic.domainmodel.domainModel.Model;
import com.stefanvuckovic.domainmodel.domainModel.RelationshipOwner;
import com.stefanvuckovic.domainmodel.domainModel.StaticFieldSelection;
import com.stefanvuckovic.domainmodel.scoping.AbstractDomainModelScopeProvider;
import com.stefanvuckovic.domainmodel.scoping.CustomIndex;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class DomainModelScopeProvider extends AbstractDomainModelScopeProvider {
  @Inject
  @Extension
  private DomainModelUtil _domainModelUtil;
  
  @Inject
  @Extension
  private CustomIndex _customIndex;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xifexpression = null;
    if ((Objects.equal(reference, DomainModelPackage.eINSTANCE.getRefType_Reference()) && 
      (EcoreUtil.getRootContainer(context) instanceof Model))) {
      return this.scopeForConcept(context);
    } else {
      IScope _xifexpression_1 = null;
      EReference _staticFieldSelection_Member = DomainModelPackage.eINSTANCE.getStaticFieldSelection_Member();
      boolean _equals = Objects.equal(reference, _staticFieldSelection_Member);
      if (_equals) {
        return this.scopeForStaticFieldSelectionMember(context);
      } else {
        IScope _xifexpression_2 = null;
        EReference _staticFieldSelection_Receiver = DomainModelPackage.eINSTANCE.getStaticFieldSelection_Receiver();
        boolean _equals_1 = Objects.equal(reference, _staticFieldSelection_Receiver);
        if (_equals_1) {
          return this.scopeForStaticFieldSelectionReceiver(context, reference);
        } else {
          _xifexpression_2 = super.getScope(context, reference);
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public IScope scopeForConcept(final EObject context) {
    IScope _xblockexpression = null;
    {
      List<IEObjectDescription> _listOfVisibleConceptsDescriptionsFromOtherFiles = this._customIndex.getListOfVisibleConceptsDescriptionsFromOtherFiles(context);
      final SimpleScope outerScope = new SimpleScope(_listOfVisibleConceptsDescriptionsFromOtherFiles);
      EObject _rootContainer = EcoreUtil.getRootContainer(context);
      EList<Concept> _concepts = ((Model) _rootContainer).getConcepts();
      _xblockexpression = Scopes.scopeFor(_concepts, outerScope);
    }
    return _xblockexpression;
  }
  
  public IScope scopeForStaticFieldSelectionMember(final EObject context) {
    IScope _xblockexpression = null;
    {
      final EObject container = ((StaticFieldSelection) context).eContainer();
      IScope _xifexpression = null;
      if ((container instanceof RelationshipOwner)) {
        IScope _xblockexpression_1 = null;
        {
          final Entity ent = EcoreUtil2.<Entity>getContainerOfType(container, Entity.class);
          IScope _xifexpression_1 = null;
          boolean _notEquals = (!Objects.equal(ent, null));
          if (_notEquals) {
            Entity _receiver = ((StaticFieldSelection) context).getReceiver();
            EList<Attribute> _attributes = _receiver.getAttributes();
            final Function1<Attribute, Boolean> _function = (Attribute attr) -> {
              return Boolean.valueOf(this.isAttributeOfSpecifiedEntityType(attr, ent));
            };
            Iterable<Attribute> _filter = IterableExtensions.<Attribute>filter(_attributes, _function);
            _xifexpression_1 = Scopes.scopeFor(_filter);
          } else {
            return IScope.NULLSCOPE;
          }
          _xblockexpression_1 = _xifexpression_1;
        }
        _xifexpression = _xblockexpression_1;
      } else {
        Entity _receiver = ((StaticFieldSelection) context).getReceiver();
        EList<Attribute> _attributes = _receiver.getAttributes();
        Entity _receiver_1 = ((StaticFieldSelection) context).getReceiver();
        Iterable<Attribute> _entityHierarchyAttributes = this._domainModelUtil.getEntityHierarchyAttributes(_receiver_1);
        IScope _scopeFor = Scopes.scopeFor(_entityHierarchyAttributes);
        _xifexpression = Scopes.scopeFor(_attributes, _scopeFor);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public boolean isAttributeOfSpecifiedEntityType(final Attribute attr, final Entity type) {
    final AttributeType attrType = attr.getType();
    final Entity ent = this._domainModelUtil.getAttributeEntityRefTypeIfExists(attrType);
    if ((ent == type)) {
      return true;
    }
    return false;
  }
  
  public IScope scopeForStaticFieldSelectionReceiver(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      if ((context instanceof RelationshipOwner)) {
        EObject _eContainer = ((RelationshipOwner)context).eContainer();
        final AttributeType attrType = ((Attribute) _eContainer).getType();
        final Entity entity = this._domainModelUtil.getAttributeEntityRefTypeIfExists(attrType);
        boolean _notEquals = (!Objects.equal(entity, null));
        if (_notEquals) {
          ArrayList<Entity> _newArrayList = CollectionLiterals.<Entity>newArrayList(entity);
          return Scopes.scopeFor(_newArrayList);
        } else {
          return IScope.NULLSCOPE;
        }
      }
      _xblockexpression = super.getScope(context, reference);
    }
    return _xblockexpression;
  }
}
