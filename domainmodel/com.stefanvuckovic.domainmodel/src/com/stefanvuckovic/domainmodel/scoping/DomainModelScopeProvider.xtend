/*
 * generated by Xtext 2.10.0
 */
package com.stefanvuckovic.domainmodel.scoping

import com.stefanvuckovic.domainmodel.DomainModelUtil
import com.stefanvuckovic.domainmodel.domainModel.Attribute
import com.stefanvuckovic.domainmodel.domainModel.DomainModelPackage
import com.stefanvuckovic.domainmodel.domainModel.Entity
import com.stefanvuckovic.domainmodel.domainModel.RelationshipOwner
import com.stefanvuckovic.domainmodel.domainModel.StaticFieldSelection
import javax.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

import static extension org.eclipse.xtext.EcoreUtil2.*
import org.eclipse.xtext.scoping.impl.SimpleScope
import com.stefanvuckovic.domainmodel.domainModel.Model

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DomainModelScopeProvider extends AbstractDomainModelScopeProvider {

	@Inject extension DomainModelUtil
	@Inject extension CustomIndex
	
	override getScope(EObject context, EReference reference) {
		if(reference == DomainModelPackage.eINSTANCE.refType_Reference &&
			context.rootContainer instanceof Model) {
			return scopeForConcept(context)
		} else if(reference == DomainModelPackage.eINSTANCE.staticFieldSelection_Member) {
			return scopeForStaticFieldSelectionMember(context)
		} else if(reference == DomainModelPackage.eINSTANCE.staticFieldSelection_Receiver) {
			return scopeForStaticFieldSelectionReceiver(context, reference)
		} else {
			super.getScope(context, reference)
		}
	}
	
	def scopeForConcept(EObject context) {
		val outerScope = new SimpleScope(context.listOfVisibleConceptsDescriptionsFromOtherFiles)
		Scopes.scopeFor((context.rootContainer as Model).concepts, outerScope)
	}
	
	def scopeForStaticFieldSelectionMember(EObject context) {
		val container = (context as StaticFieldSelection).eContainer
		if(container instanceof RelationshipOwner) {
			val ent = container.getContainerOfType(Entity)
			if(ent != null) {
				Scopes.scopeFor((context as StaticFieldSelection).receiver.attributes.filter[attr | isAttributeOfSpecifiedEntityType(attr, ent)])
			} else {
				return IScope.NULLSCOPE
			}
		} else {
			Scopes.scopeFor((context as StaticFieldSelection).receiver.attributes,
				Scopes.scopeFor((context as StaticFieldSelection).receiver.entityHierarchyAttributes)
			)
		}
	}
	
	def isAttributeOfSpecifiedEntityType(Attribute attr, Entity type) {
		val attrType = attr.type
		val ent = attrType.attributeEntityRefTypeIfExists
		if(ent === type) {
			return true
		}
		return false
	}
	
	def scopeForStaticFieldSelectionReceiver(EObject context, EReference reference) {
		if(context instanceof RelationshipOwner) {
			val attrType = (context.eContainer as Attribute).type
			val entity = attrType.attributeEntityRefTypeIfExists
	
			if(entity != null) {
				return Scopes.scopeFor(newArrayList(entity))
			} else {	
				return IScope.NULLSCOPE
			}
		}
		super.getScope(context, reference)
	}
	
}
